/*
 * stm32f446_usart_driver.c
 *
 *  Created on: 2022年12月15日
 *      Author: sscl
 */
#include<stdio.h>
#include"stm32f446_USART_driver.h"

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{

	//Variable to hold the APB clock
	uint32_t PCLKx;

	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
  //Get the value of APB bus clock in to the variable PCLKx
    if(pUSARTx == USART1 || pUSARTx == USART6)
    {
  	   //USART1 and USART6 are hanging on APB2 bus
  	   PCLKx = RCC_GetPCLK2Value();
    }else
    {
  	   PCLKx = RCC_GetPCLK1Value();
    }

    //Check for OVER8 configuration bit
    if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
    {
  	   //OVER8 = 1 , over sampling by 8
  	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
    }else
    {
  	   //over sampling by 16
  	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
    }

    //Calculate the Mantissa part
    M_part = usartdiv/100;

    //Place the Mantissa part in appropriate bit position . refer USART_BRR
    tempreg |= M_part << 4;

    //Extract the fraction part
    F_part = (usartdiv - (M_part * 100));

    //Calculate the final fractional
    if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
    {
  	  //OVER8 = 1 , over sampling by 8
    	F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);

    }else
    {
  	   //over sampling by 16
    	F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);

    }

    //Place the fractional part in appropriate bit position . refer USART_BRR
    tempreg |= F_part;

    //copy the value of tempreg in to BRR register
    pUSARTx->BRR = tempreg;
  }
