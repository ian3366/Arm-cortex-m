
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000180c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001afc  08001afc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001afc  08001afc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001afc  08001afc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001afc  08001afc  00011afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b00  08001b00  00011b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000068  08001b6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001b6c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d22  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a5  00000000  00000000  00020dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c52  00000000  00000000  000215b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001701  00000000  00000000  0002420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009768  00000000  00000000  0002590b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002f073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e44  00000000  00000000  0002f0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080019c4 	.word	0x080019c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080019c4 	.word	0x080019c4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0

	enable_processor_faults();//啟用錯誤偵測
 80002b4:	f000 fa2a 	bl	800070c <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);//MSP
 80002b8:	4806      	ldr	r0, [pc, #24]	; (80002d4 <main+0x24>)
 80002ba:	f000 f884 	bl	80003c6 <init_scheduler_stack>

	init_tasks_stack();// 初始化 以儲存虛擬幀
 80002be:	f000 f887 	bl	80003d0 <init_tasks_stack>

	init_systick_timer(TICK_HZ);//生成systick計時器異常
 80002c2:	2064      	movs	r0, #100	; 0x64
 80002c4:	f000 f83c 	bl	8000340 <init_systick_timer>

	switch_sp_to_psp();//在這行上面是使用MSP
 80002c8:	f000 f870 	bl	80003ac <switch_sp_to_psp>

	task1_handler();
 80002cc:	f000 f808 	bl	80002e0 <task1_handler>

	for(;;);
 80002d0:	e7fe      	b.n	80002d0 <main+0x20>
 80002d2:	bf00      	nop
 80002d4:	2001ec00 	.word	0x2001ec00

080002d8 <idle_task>:
}

void idle_task(void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	while(1);
 80002dc:	e7fe      	b.n	80002dc <idle_task+0x4>
	...

080002e0 <task1_handler>:
}

void task1_handler(void){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	while(1){
		printf("THIS IS TASK1\n ");
 80002e4:	4803      	ldr	r0, [pc, #12]	; (80002f4 <task1_handler+0x14>)
 80002e6:	f000 fb69 	bl	80009bc <iprintf>
		task_delay(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ee:	f000 f97d 	bl	80005ec <task_delay>
		printf("THIS IS TASK1\n ");
 80002f2:	e7f7      	b.n	80002e4 <task1_handler+0x4>
 80002f4:	080019dc 	.word	0x080019dc

080002f8 <task2_handler>:
	}
}
void task2_handler(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	while(1){
		printf("THIS IS TASK2\n ");
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <task2_handler+0x14>)
 80002fe:	f000 fb5d 	bl	80009bc <iprintf>
		task_delay(500);
 8000302:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000306:	f000 f971 	bl	80005ec <task_delay>
		printf("THIS IS TASK2\n ");
 800030a:	e7f7      	b.n	80002fc <task2_handler+0x4>
 800030c:	080019ec 	.word	0x080019ec

08000310 <task3_handler>:
	}
}
void task3_handler(void){
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1){
		printf("THIS IS TASK3\n ");
 8000314:	4803      	ldr	r0, [pc, #12]	; (8000324 <task3_handler+0x14>)
 8000316:	f000 fb51 	bl	80009bc <iprintf>
		task_delay(250);
 800031a:	20fa      	movs	r0, #250	; 0xfa
 800031c:	f000 f966 	bl	80005ec <task_delay>
		printf("THIS IS TASK3\n ");
 8000320:	e7f8      	b.n	8000314 <task3_handler+0x4>
 8000322:	bf00      	nop
 8000324:	080019fc 	.word	0x080019fc

08000328 <task4_handler>:
	}
}
void task4_handler(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	while(1){
		printf("THIS IS TASK4\n ");
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <task4_handler+0x14>)
 800032e:	f000 fb45 	bl	80009bc <iprintf>
		task_delay(125);
 8000332:	207d      	movs	r0, #125	; 0x7d
 8000334:	f000 f95a 	bl	80005ec <task_delay>
		printf("THIS IS TASK4\n ");
 8000338:	e7f8      	b.n	800032c <task4_handler+0x4>
 800033a:	bf00      	nop
 800033c:	08001a0c 	.word	0x08001a0c

08000340 <init_systick_timer>:
	}
}
// 系統計數器
void init_systick_timer(uint32_t tick_hz){
 8000340:	b480      	push	{r7}
 8000342:	b087      	sub	sp, #28
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	uint32_t* pSRVR = (uint32_t*)0xE000E014;//SRVR地址
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <init_systick_timer+0x60>)
 800034a:	617b      	str	r3, [r7, #20]
	uint32_t* pSCSR = (uint32_t*)0xE000E010;//CSR地址
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <init_systick_timer+0x64>)
 800034e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;//Reload value= N-1;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init_systick_timer+0x68>)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	fbb2 f3f3 	udiv	r3, r2, r3
 8000358:	3b01      	subs	r3, #1
 800035a:	60fb      	str	r3, [r7, #12]
	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
	// load the value in to SVR
	*pSRVR |= count_value;
 8000362:	697b      	ldr	r3, [r7, #20]
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	431a      	orrs	r2, r3
 800036a:	697b      	ldr	r3, [r7, #20]
 800036c:	601a      	str	r2, [r3, #0]
	// change CSR
	*pSCSR |=(1<<1);//Enables SysTick exception request:
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 0202 	orr.w	r2, r3, #2
 8000376:	693b      	ldr	r3, [r7, #16]
 8000378:	601a      	str	r2, [r3, #0]
	*pSCSR |=(1<<2);//Indicates the clock source:
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f043 0204 	orr.w	r2, r3, #4
 8000382:	693b      	ldr	r3, [r7, #16]
 8000384:	601a      	str	r2, [r3, #0]
	*pSCSR |=(1<<0);//Enables the counter:
 8000386:	693b      	ldr	r3, [r7, #16]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f043 0201 	orr.w	r2, r3, #1
 800038e:	693b      	ldr	r3, [r7, #16]
 8000390:	601a      	str	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	371c      	adds	r7, #28
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	e000e014 	.word	0xe000e014
 80003a4:	e000e010 	.word	0xe000e010
 80003a8:	00f42400 	.word	0x00f42400

080003ac <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void){
	//利用控制寄存器
	//1.initialize the PSP with TASK1 stack start adderss
	//get the value of psp of current task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 80003ac:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");//跑到上面的函式 值會存到 R0
 80003ae:	f000 f8f7 	bl	80005a0 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); // initialize psp
 80003b2:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); // pops back LR value
 80003b6:	f85d eb04 	ldr.w	lr, [sp], #4
	//2.change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 80003ba:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80003be:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");// return from function call
 80003c2:	4770      	bx	lr
}
 80003c4:	bf00      	nop

080003c6 <init_scheduler_stack>:

//MSP 初始化
__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack){
 80003c6:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(sched_top_of_stack):);
 80003c8:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003cc:	4770      	bx	lr
}
 80003ce:	bf00      	nop

080003d0 <init_tasks_stack>:




//PSP初始化
void init_tasks_stack(void){
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 80003d6:	4b3a      	ldr	r3, [pc, #232]	; (80004c0 <init_tasks_stack+0xf0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 80003dc:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <init_tasks_stack+0xf0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 80003e2:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <init_tasks_stack+0xf0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 80003ea:	4b35      	ldr	r3, [pc, #212]	; (80004c0 <init_tasks_stack+0xf0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <init_tasks_stack+0xf0>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 80003fa:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <init_tasks_stack+0xf0>)
 80003fc:	4a31      	ldr	r2, [pc, #196]	; (80004c4 <init_tasks_stack+0xf4>)
 80003fe:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000400:	4b2f      	ldr	r3, [pc, #188]	; (80004c0 <init_tasks_stack+0xf0>)
 8000402:	4a31      	ldr	r2, [pc, #196]	; (80004c8 <init_tasks_stack+0xf8>)
 8000404:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000406:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <init_tasks_stack+0xf0>)
 8000408:	4a30      	ldr	r2, [pc, #192]	; (80004cc <init_tasks_stack+0xfc>)
 800040a:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 800040c:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <init_tasks_stack+0xf0>)
 800040e:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <init_tasks_stack+0x100>)
 8000410:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000412:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <init_tasks_stack+0xf0>)
 8000414:	4a2f      	ldr	r2, [pc, #188]	; (80004d4 <init_tasks_stack+0x104>)
 8000416:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000418:	4b29      	ldr	r3, [pc, #164]	; (80004c0 <init_tasks_stack+0xf0>)
 800041a:	4a2f      	ldr	r2, [pc, #188]	; (80004d8 <init_tasks_stack+0x108>)
 800041c:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800041e:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <init_tasks_stack+0xf0>)
 8000420:	4a2e      	ldr	r2, [pc, #184]	; (80004dc <init_tasks_stack+0x10c>)
 8000422:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000424:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <init_tasks_stack+0xf0>)
 8000426:	4a2e      	ldr	r2, [pc, #184]	; (80004e0 <init_tasks_stack+0x110>)
 8000428:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800042a:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <init_tasks_stack+0xf0>)
 800042c:	4a2d      	ldr	r2, [pc, #180]	; (80004e4 <init_tasks_stack+0x114>)
 800042e:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 8000430:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <init_tasks_stack+0xf0>)
 8000432:	4a2d      	ldr	r2, [pc, #180]	; (80004e8 <init_tasks_stack+0x118>)
 8000434:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t* pPSP;
	for(int i=0 ; i<MAX_TASKS;i++){
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	e037      	b.n	80004ac <init_tasks_stack+0xdc>
		pPSP=(uint32_t*) user_tasks[i].psp_value;
 800043c:	4a20      	ldr	r2, [pc, #128]	; (80004c0 <init_tasks_stack+0xf0>)
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	011b      	lsls	r3, r3, #4
 8000442:	4413      	add	r3, r2
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	3b04      	subs	r3, #4
 800044c:	60fb      	str	r3, [r7, #12]
		*pPSP=DUMMY_XPSR; // 0x01000000
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000454:	601a      	str	r2, [r3, #0]
		pPSP--;//pc
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	3b04      	subs	r3, #4
 800045a:	60fb      	str	r3, [r7, #12]
		*pPSP=(uint32_t)user_tasks[i].task_handler;
 800045c:	4a18      	ldr	r2, [pc, #96]	; (80004c0 <init_tasks_stack+0xf0>)
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	011b      	lsls	r3, r3, #4
 8000462:	4413      	add	r3, r2
 8000464:	330c      	adds	r3, #12
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	601a      	str	r2, [r3, #0]
		pPSP--;//LR
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3b04      	subs	r3, #4
 8000472:	60fb      	str	r3, [r7, #12]
		*pPSP=0xFFFFFFFD; // ret
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f06f 0202 	mvn.w	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
		for(int j =0;j<13;j++){ //R0~R12
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	e008      	b.n	8000494 <init_tasks_stack+0xc4>
			pPSP--;
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3b04      	subs	r3, #4
 8000486:	60fb      	str	r3, [r7, #12]
			*pPSP=0;
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
		for(int j =0;j<13;j++){ //R0~R12
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	3301      	adds	r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b0c      	cmp	r3, #12
 8000498:	ddf3      	ble.n	8000482 <init_tasks_stack+0xb2>
		}
		user_tasks[i].psp_value=(uint32_t)pPSP;
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	4908      	ldr	r1, [pc, #32]	; (80004c0 <init_tasks_stack+0xf0>)
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	011b      	lsls	r3, r3, #4
 80004a2:	440b      	add	r3, r1
 80004a4:	601a      	str	r2, [r3, #0]
	for(int i=0 ; i<MAX_TASKS;i++){
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	3301      	adds	r3, #1
 80004aa:	60bb      	str	r3, [r7, #8]
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	ddc4      	ble.n	800043c <init_tasks_stack+0x6c>
	}
}
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	3714      	adds	r7, #20
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	20000084 	.word	0x20000084
 80004c4:	2001f000 	.word	0x2001f000
 80004c8:	20020000 	.word	0x20020000
 80004cc:	2001fc00 	.word	0x2001fc00
 80004d0:	2001f800 	.word	0x2001f800
 80004d4:	2001f400 	.word	0x2001f400
 80004d8:	080002d9 	.word	0x080002d9
 80004dc:	080002e1 	.word	0x080002e1
 80004e0:	080002f9 	.word	0x080002f9
 80004e4:	08000311 	.word	0x08000311
 80004e8:	08000329 	.word	0x08000329

080004ec <save_psp_value>:

void save_psp_value(uint32_t current_psp_value){
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value=current_psp_value;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <save_psp_value+0x24>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <save_psp_value+0x28>)
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	4413      	add	r3, r2
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	20000000 	.word	0x20000000
 8000514:	20000084 	.word	0x20000084

08000518 <update_next_task>:

void update_next_task(void){
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 800051e:	23ff      	movs	r3, #255	; 0xff
 8000520:	607b      	str	r3, [r7, #4]

	for (int i = 0;i<(MAX_TASKS);i++){
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	e024      	b.n	8000572 <update_next_task+0x5a>
		current_task++;
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <update_next_task+0x7c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	b2da      	uxtb	r2, r3
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <update_next_task+0x7c>)
 8000532:	701a      	strb	r2, [r3, #0]
		current_task = current_task% MAX_TASKS;//(1->2->3->0)
 8000534:	4b17      	ldr	r3, [pc, #92]	; (8000594 <update_next_task+0x7c>)
 8000536:	781a      	ldrb	r2, [r3, #0]
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <update_next_task+0x80>)
 800053a:	fba3 1302 	umull	r1, r3, r3, r2
 800053e:	0899      	lsrs	r1, r3, #2
 8000540:	460b      	mov	r3, r1
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	440b      	add	r3, r1
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	b2da      	uxtb	r2, r3
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <update_next_task+0x7c>)
 800054c:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <update_next_task+0x7c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <update_next_task+0x84>)
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4413      	add	r3, r2
 8000558:	3308      	adds	r3, #8
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	607b      	str	r3, [r7, #4]
		if((state == TASK_READY_STATE)&&(current_task !=0)){
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d103      	bne.n	800056c <update_next_task+0x54>
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <update_next_task+0x7c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d106      	bne.n	800057a <update_next_task+0x62>
	for (int i = 0;i<(MAX_TASKS);i++){
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	2b04      	cmp	r3, #4
 8000576:	ddd7      	ble.n	8000528 <update_next_task+0x10>
 8000578:	e000      	b.n	800057c <update_next_task+0x64>
			break;
 800057a:	bf00      	nop
		}
	}
	if (state != TASK_READY_STATE){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <update_next_task+0x70>
		current_task=0;
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <update_next_task+0x7c>)
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
	}


}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	cccccccd 	.word	0xcccccccd
 800059c:	20000084 	.word	0x20000084

080005a0 <get_psp_value>:

uint32_t get_psp_value(void){
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <get_psp_value+0x1c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <get_psp_value+0x20>)
 80005aa:	011b      	lsls	r3, r3, #4
 80005ac:	4413      	add	r3, r2
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000084 	.word	0x20000084

080005c4 <schedule>:

uint32_t g_tick_count= 0;

void schedule(void){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <schedule+0x24>)
 80005cc:	607b      	str	r3, [r7, #4]
	*pICSR |= (1<<28);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	601a      	str	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	e000ed04 	.word	0xe000ed04

080005ec <task_delay>:


void task_delay(uint32_t tick_count){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	if(current_task == 0){
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <task_delay+0x44>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d115      	bne.n	8000628 <task_delay+0x3c>
		user_tasks[current_task].block_count = g_tick_count+tick_count;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <task_delay+0x48>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <task_delay+0x44>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	441a      	add	r2, r3
 800060a:	490b      	ldr	r1, [pc, #44]	; (8000638 <task_delay+0x4c>)
 800060c:	0103      	lsls	r3, r0, #4
 800060e:	440b      	add	r3, r1
 8000610:	3304      	adds	r3, #4
 8000612:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <task_delay+0x44>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <task_delay+0x4c>)
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	4413      	add	r3, r2
 800061e:	3308      	adds	r3, #8
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	701a      	strb	r2, [r3, #0]
		schedule();
 8000624:	f7ff ffce 	bl	80005c4 <schedule>
	}
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	200000d4 	.word	0x200000d4
 8000638:	20000084 	.word	0x20000084

0800063c <PendSV_Handler>:

__attribute__((naked)) void PendSV_Handler(void){
	/*Save the context of current task*/
		//1.Get current running task PSP value
	__asm volatile("MRS R0,PSP");
 800063c:	f3ef 8009 	mrs	r0, PSP
		//2.Using the PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");//Store Multiple registers, decrement before //R0 stored address
 8000640:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 8000644:	b500      	push	{lr}
		//驚嘆號是每個值都能得到更新
		//3.Save the current value of PSP
	__asm volatile("BL save_psp_value");
 8000646:	f7ff ff51 	bl	80004ec <save_psp_value>


		/*Retrieve the context of next task*/
		//1. Decide next task ro run
	__asm volatile("BL update_next_task");
 800064a:	f7ff ff65 	bl	8000518 <update_next_task>
		//2. get its past PSP value
	__asm volatile("BL get_psp_value");
 800064e:	f7ff ffa7 	bl	80005a0 <get_psp_value>
		//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile("LDMIA R0!,{R4-R11}");//多個輸入
 8000652:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
		//4. update PSP and exit
	__asm volatile("MSR PSP,R0");//psp現在指向下一個更新任務
 8000656:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800065a:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 800065e:	4770      	bx	lr
}
 8000660:	bf00      	nop
	...

08000664 <updated_global_tick_count>:


void updated_global_tick_count(void){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <updated_global_tick_count+0x18>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a03      	ldr	r2, [pc, #12]	; (800067c <updated_global_tick_count+0x18>)
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	200000d4 	.word	0x200000d4

08000680 <unblock_task>:

void unblock_task(void){
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
	for(int i =1 ; i<MAX_TASKS;i++){
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	e01b      	b.n	80006c4 <unblock_task+0x44>
		if(user_tasks[i].current_state !=TASK_READY_STATE){
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <unblock_task+0x58>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	4413      	add	r3, r2
 8000694:	3308      	adds	r3, #8
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d010      	beq.n	80006be <unblock_task+0x3e>
			if(user_tasks[i].block_count == g_tick_count){
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <unblock_task+0x58>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4413      	add	r3, r2
 80006a4:	3304      	adds	r3, #4
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <unblock_task+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d106      	bne.n	80006be <unblock_task+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 80006b0:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <unblock_task+0x58>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4413      	add	r3, r2
 80006b8:	3308      	adds	r3, #8
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	for(int i =1 ; i<MAX_TASKS;i++){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3301      	adds	r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	dde0      	ble.n	800068c <unblock_task+0xc>
			}
		}
	}
}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000084 	.word	0x20000084
 80006dc:	200000d4 	.word	0x200000d4

080006e0 <SysTick_Handler>:

void SysTick_Handler(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04; // ICSR
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <SysTick_Handler+0x28>)
 80006e8:	607b      	str	r3, [r7, #4]

	updated_global_tick_count();
 80006ea:	f7ff ffbb 	bl	8000664 <updated_global_tick_count>
	unblock_task();
 80006ee:	f7ff ffc7 	bl	8000680 <unblock_task>
	*pICSR |= (1<<28); // 啟用PendSV
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000ed04 	.word	0xe000ed04

0800070c <enable_processor_faults>:




// 錯誤檢測
void enable_processor_faults(void){
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <enable_processor_faults+0x3c>)
 8000714:	607b      	str	r3, [r7, #4]
	*pSHCSR|= (1<<16);//mem manage
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	601a      	str	r2, [r3, #0]
	*pSHCSR|= (1<<17);//bus fault
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
	*pSHCSR|= (1<<18);//usage fault
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	601a      	str	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed24 	.word	0xe000ed24

0800074c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	printf("Exception :Hardfault\n");
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <HardFault_Handler+0xc>)
 8000752:	f000 f9b9 	bl	8000ac8 <puts>
	while(1);
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0xa>
 8000758:	08001a1c 	.word	0x08001a1c

0800075c <BusFault_Handler>:
{
	printf("Exception :MemMangefault\n");
	while(1);
}
void BusFault_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	printf("Exception :Busfault\n");
 8000760:	4801      	ldr	r0, [pc, #4]	; (8000768 <BusFault_Handler+0xc>)
 8000762:	f000 f9b1 	bl	8000ac8 <puts>
	while(1);
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0xa>
 8000768:	08001a50 	.word	0x08001a50

0800076c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <ITM_SendChar+0x48>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <ITM_SendChar+0x48>)
 800077c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000780:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <ITM_SendChar+0x4c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0c      	ldr	r2, [pc, #48]	; (80007b8 <ITM_SendChar+0x4c>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800078e:	bf00      	nop
 8000790:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f8      	beq.n	8000790 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800079e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000edfc 	.word	0xe000edfc
 80007b8:	e0000e00 	.word	0xe0000e00

080007bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	e00a      	b.n	80007e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ce:	f3af 8000 	nop.w
 80007d2:	4601      	mov	r1, r0
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	b2ca      	uxtb	r2, r1
 80007dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697a      	ldr	r2, [r7, #20]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dbf0      	blt.n	80007ce <_read+0x12>
	}

return len;
 80007ec:	687b      	ldr	r3, [r7, #4]
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	60f8      	str	r0, [r7, #12]
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e009      	b.n	800081c <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	1c5a      	adds	r2, r3, #1
 800080c:	60ba      	str	r2, [r7, #8]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ffab 	bl	800076c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbf1      	blt.n	8000808 <_write+0x12>
	}
	return len;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_close>:

int _close(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	return -1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000856:	605a      	str	r2, [r3, #4]
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_isatty>:

int _isatty(int file)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	return 1;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f000 f846 	bl	8000958 <__errno>
 80008cc:	4603      	mov	r3, r0
 80008ce:	220c      	movs	r2, #12
 80008d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20020000 	.word	0x20020000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200000d8 	.word	0x200000d8
 8000900:	200000f0 	.word	0x200000f0

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000908:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 f817 	bl	8000964 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fcbb 	bl	80002b0 <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000948:	08001b04 	.word	0x08001b04
  ldr r2, =_sbss
 800094c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000950:	200000ec 	.word	0x200000ec

08000954 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <__errno>:
 8000958:	4b01      	ldr	r3, [pc, #4]	; (8000960 <__errno+0x8>)
 800095a:	6818      	ldr	r0, [r3, #0]
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000004 	.word	0x20000004

08000964 <__libc_init_array>:
 8000964:	b570      	push	{r4, r5, r6, lr}
 8000966:	4d0d      	ldr	r5, [pc, #52]	; (800099c <__libc_init_array+0x38>)
 8000968:	4c0d      	ldr	r4, [pc, #52]	; (80009a0 <__libc_init_array+0x3c>)
 800096a:	1b64      	subs	r4, r4, r5
 800096c:	10a4      	asrs	r4, r4, #2
 800096e:	2600      	movs	r6, #0
 8000970:	42a6      	cmp	r6, r4
 8000972:	d109      	bne.n	8000988 <__libc_init_array+0x24>
 8000974:	4d0b      	ldr	r5, [pc, #44]	; (80009a4 <__libc_init_array+0x40>)
 8000976:	4c0c      	ldr	r4, [pc, #48]	; (80009a8 <__libc_init_array+0x44>)
 8000978:	f001 f824 	bl	80019c4 <_init>
 800097c:	1b64      	subs	r4, r4, r5
 800097e:	10a4      	asrs	r4, r4, #2
 8000980:	2600      	movs	r6, #0
 8000982:	42a6      	cmp	r6, r4
 8000984:	d105      	bne.n	8000992 <__libc_init_array+0x2e>
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f855 3b04 	ldr.w	r3, [r5], #4
 800098c:	4798      	blx	r3
 800098e:	3601      	adds	r6, #1
 8000990:	e7ee      	b.n	8000970 <__libc_init_array+0xc>
 8000992:	f855 3b04 	ldr.w	r3, [r5], #4
 8000996:	4798      	blx	r3
 8000998:	3601      	adds	r6, #1
 800099a:	e7f2      	b.n	8000982 <__libc_init_array+0x1e>
 800099c:	08001afc 	.word	0x08001afc
 80009a0:	08001afc 	.word	0x08001afc
 80009a4:	08001afc 	.word	0x08001afc
 80009a8:	08001b00 	.word	0x08001b00

080009ac <memset>:
 80009ac:	4402      	add	r2, r0
 80009ae:	4603      	mov	r3, r0
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d100      	bne.n	80009b6 <memset+0xa>
 80009b4:	4770      	bx	lr
 80009b6:	f803 1b01 	strb.w	r1, [r3], #1
 80009ba:	e7f9      	b.n	80009b0 <memset+0x4>

080009bc <iprintf>:
 80009bc:	b40f      	push	{r0, r1, r2, r3}
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <iprintf+0x2c>)
 80009c0:	b513      	push	{r0, r1, r4, lr}
 80009c2:	681c      	ldr	r4, [r3, #0]
 80009c4:	b124      	cbz	r4, 80009d0 <iprintf+0x14>
 80009c6:	69a3      	ldr	r3, [r4, #24]
 80009c8:	b913      	cbnz	r3, 80009d0 <iprintf+0x14>
 80009ca:	4620      	mov	r0, r4
 80009cc:	f000 fa5e 	bl	8000e8c <__sinit>
 80009d0:	ab05      	add	r3, sp, #20
 80009d2:	9a04      	ldr	r2, [sp, #16]
 80009d4:	68a1      	ldr	r1, [r4, #8]
 80009d6:	9301      	str	r3, [sp, #4]
 80009d8:	4620      	mov	r0, r4
 80009da:	f000 fc67 	bl	80012ac <_vfiprintf_r>
 80009de:	b002      	add	sp, #8
 80009e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009e4:	b004      	add	sp, #16
 80009e6:	4770      	bx	lr
 80009e8:	20000004 	.word	0x20000004

080009ec <_puts_r>:
 80009ec:	b570      	push	{r4, r5, r6, lr}
 80009ee:	460e      	mov	r6, r1
 80009f0:	4605      	mov	r5, r0
 80009f2:	b118      	cbz	r0, 80009fc <_puts_r+0x10>
 80009f4:	6983      	ldr	r3, [r0, #24]
 80009f6:	b90b      	cbnz	r3, 80009fc <_puts_r+0x10>
 80009f8:	f000 fa48 	bl	8000e8c <__sinit>
 80009fc:	69ab      	ldr	r3, [r5, #24]
 80009fe:	68ac      	ldr	r4, [r5, #8]
 8000a00:	b913      	cbnz	r3, 8000a08 <_puts_r+0x1c>
 8000a02:	4628      	mov	r0, r5
 8000a04:	f000 fa42 	bl	8000e8c <__sinit>
 8000a08:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <_puts_r+0xd0>)
 8000a0a:	429c      	cmp	r4, r3
 8000a0c:	d120      	bne.n	8000a50 <_puts_r+0x64>
 8000a0e:	686c      	ldr	r4, [r5, #4]
 8000a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a12:	07db      	lsls	r3, r3, #31
 8000a14:	d405      	bmi.n	8000a22 <_puts_r+0x36>
 8000a16:	89a3      	ldrh	r3, [r4, #12]
 8000a18:	0598      	lsls	r0, r3, #22
 8000a1a:	d402      	bmi.n	8000a22 <_puts_r+0x36>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a1e:	f000 fad3 	bl	8000fc8 <__retarget_lock_acquire_recursive>
 8000a22:	89a3      	ldrh	r3, [r4, #12]
 8000a24:	0719      	lsls	r1, r3, #28
 8000a26:	d51d      	bpl.n	8000a64 <_puts_r+0x78>
 8000a28:	6923      	ldr	r3, [r4, #16]
 8000a2a:	b1db      	cbz	r3, 8000a64 <_puts_r+0x78>
 8000a2c:	3e01      	subs	r6, #1
 8000a2e:	68a3      	ldr	r3, [r4, #8]
 8000a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a34:	3b01      	subs	r3, #1
 8000a36:	60a3      	str	r3, [r4, #8]
 8000a38:	bb39      	cbnz	r1, 8000a8a <_puts_r+0x9e>
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	da38      	bge.n	8000ab0 <_puts_r+0xc4>
 8000a3e:	4622      	mov	r2, r4
 8000a40:	210a      	movs	r1, #10
 8000a42:	4628      	mov	r0, r5
 8000a44:	f000 f848 	bl	8000ad8 <__swbuf_r>
 8000a48:	3001      	adds	r0, #1
 8000a4a:	d011      	beq.n	8000a70 <_puts_r+0x84>
 8000a4c:	250a      	movs	r5, #10
 8000a4e:	e011      	b.n	8000a74 <_puts_r+0x88>
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <_puts_r+0xd4>)
 8000a52:	429c      	cmp	r4, r3
 8000a54:	d101      	bne.n	8000a5a <_puts_r+0x6e>
 8000a56:	68ac      	ldr	r4, [r5, #8]
 8000a58:	e7da      	b.n	8000a10 <_puts_r+0x24>
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <_puts_r+0xd8>)
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	bf08      	it	eq
 8000a60:	68ec      	ldreq	r4, [r5, #12]
 8000a62:	e7d5      	b.n	8000a10 <_puts_r+0x24>
 8000a64:	4621      	mov	r1, r4
 8000a66:	4628      	mov	r0, r5
 8000a68:	f000 f888 	bl	8000b7c <__swsetup_r>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d0dd      	beq.n	8000a2c <_puts_r+0x40>
 8000a70:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a76:	07da      	lsls	r2, r3, #31
 8000a78:	d405      	bmi.n	8000a86 <_puts_r+0x9a>
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	059b      	lsls	r3, r3, #22
 8000a7e:	d402      	bmi.n	8000a86 <_puts_r+0x9a>
 8000a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a82:	f000 faa2 	bl	8000fca <__retarget_lock_release_recursive>
 8000a86:	4628      	mov	r0, r5
 8000a88:	bd70      	pop	{r4, r5, r6, pc}
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da04      	bge.n	8000a98 <_puts_r+0xac>
 8000a8e:	69a2      	ldr	r2, [r4, #24]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dc06      	bgt.n	8000aa2 <_puts_r+0xb6>
 8000a94:	290a      	cmp	r1, #10
 8000a96:	d004      	beq.n	8000aa2 <_puts_r+0xb6>
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	6022      	str	r2, [r4, #0]
 8000a9e:	7019      	strb	r1, [r3, #0]
 8000aa0:	e7c5      	b.n	8000a2e <_puts_r+0x42>
 8000aa2:	4622      	mov	r2, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 f817 	bl	8000ad8 <__swbuf_r>
 8000aaa:	3001      	adds	r0, #1
 8000aac:	d1bf      	bne.n	8000a2e <_puts_r+0x42>
 8000aae:	e7df      	b.n	8000a70 <_puts_r+0x84>
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	250a      	movs	r5, #10
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	6022      	str	r2, [r4, #0]
 8000ab8:	701d      	strb	r5, [r3, #0]
 8000aba:	e7db      	b.n	8000a74 <_puts_r+0x88>
 8000abc:	08001a88 	.word	0x08001a88
 8000ac0:	08001aa8 	.word	0x08001aa8
 8000ac4:	08001a68 	.word	0x08001a68

08000ac8 <puts>:
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <puts+0xc>)
 8000aca:	4601      	mov	r1, r0
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	f7ff bf8d 	b.w	80009ec <_puts_r>
 8000ad2:	bf00      	nop
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <__swbuf_r>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	460e      	mov	r6, r1
 8000adc:	4614      	mov	r4, r2
 8000ade:	4605      	mov	r5, r0
 8000ae0:	b118      	cbz	r0, 8000aea <__swbuf_r+0x12>
 8000ae2:	6983      	ldr	r3, [r0, #24]
 8000ae4:	b90b      	cbnz	r3, 8000aea <__swbuf_r+0x12>
 8000ae6:	f000 f9d1 	bl	8000e8c <__sinit>
 8000aea:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <__swbuf_r+0x98>)
 8000aec:	429c      	cmp	r4, r3
 8000aee:	d12b      	bne.n	8000b48 <__swbuf_r+0x70>
 8000af0:	686c      	ldr	r4, [r5, #4]
 8000af2:	69a3      	ldr	r3, [r4, #24]
 8000af4:	60a3      	str	r3, [r4, #8]
 8000af6:	89a3      	ldrh	r3, [r4, #12]
 8000af8:	071a      	lsls	r2, r3, #28
 8000afa:	d52f      	bpl.n	8000b5c <__swbuf_r+0x84>
 8000afc:	6923      	ldr	r3, [r4, #16]
 8000afe:	b36b      	cbz	r3, 8000b5c <__swbuf_r+0x84>
 8000b00:	6923      	ldr	r3, [r4, #16]
 8000b02:	6820      	ldr	r0, [r4, #0]
 8000b04:	1ac0      	subs	r0, r0, r3
 8000b06:	6963      	ldr	r3, [r4, #20]
 8000b08:	b2f6      	uxtb	r6, r6
 8000b0a:	4283      	cmp	r3, r0
 8000b0c:	4637      	mov	r7, r6
 8000b0e:	dc04      	bgt.n	8000b1a <__swbuf_r+0x42>
 8000b10:	4621      	mov	r1, r4
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 f926 	bl	8000d64 <_fflush_r>
 8000b18:	bb30      	cbnz	r0, 8000b68 <__swbuf_r+0x90>
 8000b1a:	68a3      	ldr	r3, [r4, #8]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	60a3      	str	r3, [r4, #8]
 8000b20:	6823      	ldr	r3, [r4, #0]
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	6022      	str	r2, [r4, #0]
 8000b26:	701e      	strb	r6, [r3, #0]
 8000b28:	6963      	ldr	r3, [r4, #20]
 8000b2a:	3001      	adds	r0, #1
 8000b2c:	4283      	cmp	r3, r0
 8000b2e:	d004      	beq.n	8000b3a <__swbuf_r+0x62>
 8000b30:	89a3      	ldrh	r3, [r4, #12]
 8000b32:	07db      	lsls	r3, r3, #31
 8000b34:	d506      	bpl.n	8000b44 <__swbuf_r+0x6c>
 8000b36:	2e0a      	cmp	r6, #10
 8000b38:	d104      	bne.n	8000b44 <__swbuf_r+0x6c>
 8000b3a:	4621      	mov	r1, r4
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f000 f911 	bl	8000d64 <_fflush_r>
 8000b42:	b988      	cbnz	r0, 8000b68 <__swbuf_r+0x90>
 8000b44:	4638      	mov	r0, r7
 8000b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <__swbuf_r+0x9c>)
 8000b4a:	429c      	cmp	r4, r3
 8000b4c:	d101      	bne.n	8000b52 <__swbuf_r+0x7a>
 8000b4e:	68ac      	ldr	r4, [r5, #8]
 8000b50:	e7cf      	b.n	8000af2 <__swbuf_r+0x1a>
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <__swbuf_r+0xa0>)
 8000b54:	429c      	cmp	r4, r3
 8000b56:	bf08      	it	eq
 8000b58:	68ec      	ldreq	r4, [r5, #12]
 8000b5a:	e7ca      	b.n	8000af2 <__swbuf_r+0x1a>
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f000 f80c 	bl	8000b7c <__swsetup_r>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	d0cb      	beq.n	8000b00 <__swbuf_r+0x28>
 8000b68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000b6c:	e7ea      	b.n	8000b44 <__swbuf_r+0x6c>
 8000b6e:	bf00      	nop
 8000b70:	08001a88 	.word	0x08001a88
 8000b74:	08001aa8 	.word	0x08001aa8
 8000b78:	08001a68 	.word	0x08001a68

08000b7c <__swsetup_r>:
 8000b7c:	4b32      	ldr	r3, [pc, #200]	; (8000c48 <__swsetup_r+0xcc>)
 8000b7e:	b570      	push	{r4, r5, r6, lr}
 8000b80:	681d      	ldr	r5, [r3, #0]
 8000b82:	4606      	mov	r6, r0
 8000b84:	460c      	mov	r4, r1
 8000b86:	b125      	cbz	r5, 8000b92 <__swsetup_r+0x16>
 8000b88:	69ab      	ldr	r3, [r5, #24]
 8000b8a:	b913      	cbnz	r3, 8000b92 <__swsetup_r+0x16>
 8000b8c:	4628      	mov	r0, r5
 8000b8e:	f000 f97d 	bl	8000e8c <__sinit>
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <__swsetup_r+0xd0>)
 8000b94:	429c      	cmp	r4, r3
 8000b96:	d10f      	bne.n	8000bb8 <__swsetup_r+0x3c>
 8000b98:	686c      	ldr	r4, [r5, #4]
 8000b9a:	89a3      	ldrh	r3, [r4, #12]
 8000b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ba0:	0719      	lsls	r1, r3, #28
 8000ba2:	d42c      	bmi.n	8000bfe <__swsetup_r+0x82>
 8000ba4:	06dd      	lsls	r5, r3, #27
 8000ba6:	d411      	bmi.n	8000bcc <__swsetup_r+0x50>
 8000ba8:	2309      	movs	r3, #9
 8000baa:	6033      	str	r3, [r6, #0]
 8000bac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bb0:	81a3      	strh	r3, [r4, #12]
 8000bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb6:	e03e      	b.n	8000c36 <__swsetup_r+0xba>
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <__swsetup_r+0xd4>)
 8000bba:	429c      	cmp	r4, r3
 8000bbc:	d101      	bne.n	8000bc2 <__swsetup_r+0x46>
 8000bbe:	68ac      	ldr	r4, [r5, #8]
 8000bc0:	e7eb      	b.n	8000b9a <__swsetup_r+0x1e>
 8000bc2:	4b24      	ldr	r3, [pc, #144]	; (8000c54 <__swsetup_r+0xd8>)
 8000bc4:	429c      	cmp	r4, r3
 8000bc6:	bf08      	it	eq
 8000bc8:	68ec      	ldreq	r4, [r5, #12]
 8000bca:	e7e6      	b.n	8000b9a <__swsetup_r+0x1e>
 8000bcc:	0758      	lsls	r0, r3, #29
 8000bce:	d512      	bpl.n	8000bf6 <__swsetup_r+0x7a>
 8000bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bd2:	b141      	cbz	r1, 8000be6 <__swsetup_r+0x6a>
 8000bd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bd8:	4299      	cmp	r1, r3
 8000bda:	d002      	beq.n	8000be2 <__swsetup_r+0x66>
 8000bdc:	4630      	mov	r0, r6
 8000bde:	f000 fa5b 	bl	8001098 <_free_r>
 8000be2:	2300      	movs	r3, #0
 8000be4:	6363      	str	r3, [r4, #52]	; 0x34
 8000be6:	89a3      	ldrh	r3, [r4, #12]
 8000be8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bec:	81a3      	strh	r3, [r4, #12]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	6063      	str	r3, [r4, #4]
 8000bf2:	6923      	ldr	r3, [r4, #16]
 8000bf4:	6023      	str	r3, [r4, #0]
 8000bf6:	89a3      	ldrh	r3, [r4, #12]
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	81a3      	strh	r3, [r4, #12]
 8000bfe:	6923      	ldr	r3, [r4, #16]
 8000c00:	b94b      	cbnz	r3, 8000c16 <__swsetup_r+0x9a>
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c0c:	d003      	beq.n	8000c16 <__swsetup_r+0x9a>
 8000c0e:	4621      	mov	r1, r4
 8000c10:	4630      	mov	r0, r6
 8000c12:	f000 fa01 	bl	8001018 <__smakebuf_r>
 8000c16:	89a0      	ldrh	r0, [r4, #12]
 8000c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c1c:	f010 0301 	ands.w	r3, r0, #1
 8000c20:	d00a      	beq.n	8000c38 <__swsetup_r+0xbc>
 8000c22:	2300      	movs	r3, #0
 8000c24:	60a3      	str	r3, [r4, #8]
 8000c26:	6963      	ldr	r3, [r4, #20]
 8000c28:	425b      	negs	r3, r3
 8000c2a:	61a3      	str	r3, [r4, #24]
 8000c2c:	6923      	ldr	r3, [r4, #16]
 8000c2e:	b943      	cbnz	r3, 8000c42 <__swsetup_r+0xc6>
 8000c30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c34:	d1ba      	bne.n	8000bac <__swsetup_r+0x30>
 8000c36:	bd70      	pop	{r4, r5, r6, pc}
 8000c38:	0781      	lsls	r1, r0, #30
 8000c3a:	bf58      	it	pl
 8000c3c:	6963      	ldrpl	r3, [r4, #20]
 8000c3e:	60a3      	str	r3, [r4, #8]
 8000c40:	e7f4      	b.n	8000c2c <__swsetup_r+0xb0>
 8000c42:	2000      	movs	r0, #0
 8000c44:	e7f7      	b.n	8000c36 <__swsetup_r+0xba>
 8000c46:	bf00      	nop
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	08001a88 	.word	0x08001a88
 8000c50:	08001aa8 	.word	0x08001aa8
 8000c54:	08001a68 	.word	0x08001a68

08000c58 <__sflush_r>:
 8000c58:	898a      	ldrh	r2, [r1, #12]
 8000c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c5e:	4605      	mov	r5, r0
 8000c60:	0710      	lsls	r0, r2, #28
 8000c62:	460c      	mov	r4, r1
 8000c64:	d458      	bmi.n	8000d18 <__sflush_r+0xc0>
 8000c66:	684b      	ldr	r3, [r1, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dc05      	bgt.n	8000c78 <__sflush_r+0x20>
 8000c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	dc02      	bgt.n	8000c78 <__sflush_r+0x20>
 8000c72:	2000      	movs	r0, #0
 8000c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d0f9      	beq.n	8000c72 <__sflush_r+0x1a>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c84:	682f      	ldr	r7, [r5, #0]
 8000c86:	602b      	str	r3, [r5, #0]
 8000c88:	d032      	beq.n	8000cf0 <__sflush_r+0x98>
 8000c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c8c:	89a3      	ldrh	r3, [r4, #12]
 8000c8e:	075a      	lsls	r2, r3, #29
 8000c90:	d505      	bpl.n	8000c9e <__sflush_r+0x46>
 8000c92:	6863      	ldr	r3, [r4, #4]
 8000c94:	1ac0      	subs	r0, r0, r3
 8000c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c98:	b10b      	cbz	r3, 8000c9e <__sflush_r+0x46>
 8000c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c9c:	1ac0      	subs	r0, r0, r3
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ca4:	6a21      	ldr	r1, [r4, #32]
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	47b0      	blx	r6
 8000caa:	1c43      	adds	r3, r0, #1
 8000cac:	89a3      	ldrh	r3, [r4, #12]
 8000cae:	d106      	bne.n	8000cbe <__sflush_r+0x66>
 8000cb0:	6829      	ldr	r1, [r5, #0]
 8000cb2:	291d      	cmp	r1, #29
 8000cb4:	d82c      	bhi.n	8000d10 <__sflush_r+0xb8>
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <__sflush_r+0x108>)
 8000cb8:	40ca      	lsrs	r2, r1
 8000cba:	07d6      	lsls	r6, r2, #31
 8000cbc:	d528      	bpl.n	8000d10 <__sflush_r+0xb8>
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	6062      	str	r2, [r4, #4]
 8000cc2:	04d9      	lsls	r1, r3, #19
 8000cc4:	6922      	ldr	r2, [r4, #16]
 8000cc6:	6022      	str	r2, [r4, #0]
 8000cc8:	d504      	bpl.n	8000cd4 <__sflush_r+0x7c>
 8000cca:	1c42      	adds	r2, r0, #1
 8000ccc:	d101      	bne.n	8000cd2 <__sflush_r+0x7a>
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	b903      	cbnz	r3, 8000cd4 <__sflush_r+0x7c>
 8000cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8000cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cd6:	602f      	str	r7, [r5, #0]
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d0ca      	beq.n	8000c72 <__sflush_r+0x1a>
 8000cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d002      	beq.n	8000cea <__sflush_r+0x92>
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	f000 f9d7 	bl	8001098 <_free_r>
 8000cea:	2000      	movs	r0, #0
 8000cec:	6360      	str	r0, [r4, #52]	; 0x34
 8000cee:	e7c1      	b.n	8000c74 <__sflush_r+0x1c>
 8000cf0:	6a21      	ldr	r1, [r4, #32]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	47b0      	blx	r6
 8000cf8:	1c41      	adds	r1, r0, #1
 8000cfa:	d1c7      	bne.n	8000c8c <__sflush_r+0x34>
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0c4      	beq.n	8000c8c <__sflush_r+0x34>
 8000d02:	2b1d      	cmp	r3, #29
 8000d04:	d001      	beq.n	8000d0a <__sflush_r+0xb2>
 8000d06:	2b16      	cmp	r3, #22
 8000d08:	d101      	bne.n	8000d0e <__sflush_r+0xb6>
 8000d0a:	602f      	str	r7, [r5, #0]
 8000d0c:	e7b1      	b.n	8000c72 <__sflush_r+0x1a>
 8000d0e:	89a3      	ldrh	r3, [r4, #12]
 8000d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d14:	81a3      	strh	r3, [r4, #12]
 8000d16:	e7ad      	b.n	8000c74 <__sflush_r+0x1c>
 8000d18:	690f      	ldr	r7, [r1, #16]
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d0a9      	beq.n	8000c72 <__sflush_r+0x1a>
 8000d1e:	0793      	lsls	r3, r2, #30
 8000d20:	680e      	ldr	r6, [r1, #0]
 8000d22:	bf08      	it	eq
 8000d24:	694b      	ldreq	r3, [r1, #20]
 8000d26:	600f      	str	r7, [r1, #0]
 8000d28:	bf18      	it	ne
 8000d2a:	2300      	movne	r3, #0
 8000d2c:	eba6 0807 	sub.w	r8, r6, r7
 8000d30:	608b      	str	r3, [r1, #8]
 8000d32:	f1b8 0f00 	cmp.w	r8, #0
 8000d36:	dd9c      	ble.n	8000c72 <__sflush_r+0x1a>
 8000d38:	6a21      	ldr	r1, [r4, #32]
 8000d3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d3c:	4643      	mov	r3, r8
 8000d3e:	463a      	mov	r2, r7
 8000d40:	4628      	mov	r0, r5
 8000d42:	47b0      	blx	r6
 8000d44:	2800      	cmp	r0, #0
 8000d46:	dc06      	bgt.n	8000d56 <__sflush_r+0xfe>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d4e:	81a3      	strh	r3, [r4, #12]
 8000d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d54:	e78e      	b.n	8000c74 <__sflush_r+0x1c>
 8000d56:	4407      	add	r7, r0
 8000d58:	eba8 0800 	sub.w	r8, r8, r0
 8000d5c:	e7e9      	b.n	8000d32 <__sflush_r+0xda>
 8000d5e:	bf00      	nop
 8000d60:	20400001 	.word	0x20400001

08000d64 <_fflush_r>:
 8000d64:	b538      	push	{r3, r4, r5, lr}
 8000d66:	690b      	ldr	r3, [r1, #16]
 8000d68:	4605      	mov	r5, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	b913      	cbnz	r3, 8000d74 <_fflush_r+0x10>
 8000d6e:	2500      	movs	r5, #0
 8000d70:	4628      	mov	r0, r5
 8000d72:	bd38      	pop	{r3, r4, r5, pc}
 8000d74:	b118      	cbz	r0, 8000d7e <_fflush_r+0x1a>
 8000d76:	6983      	ldr	r3, [r0, #24]
 8000d78:	b90b      	cbnz	r3, 8000d7e <_fflush_r+0x1a>
 8000d7a:	f000 f887 	bl	8000e8c <__sinit>
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <_fflush_r+0x6c>)
 8000d80:	429c      	cmp	r4, r3
 8000d82:	d11b      	bne.n	8000dbc <_fflush_r+0x58>
 8000d84:	686c      	ldr	r4, [r5, #4]
 8000d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0ef      	beq.n	8000d6e <_fflush_r+0xa>
 8000d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d90:	07d0      	lsls	r0, r2, #31
 8000d92:	d404      	bmi.n	8000d9e <_fflush_r+0x3a>
 8000d94:	0599      	lsls	r1, r3, #22
 8000d96:	d402      	bmi.n	8000d9e <_fflush_r+0x3a>
 8000d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d9a:	f000 f915 	bl	8000fc8 <__retarget_lock_acquire_recursive>
 8000d9e:	4628      	mov	r0, r5
 8000da0:	4621      	mov	r1, r4
 8000da2:	f7ff ff59 	bl	8000c58 <__sflush_r>
 8000da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000da8:	07da      	lsls	r2, r3, #31
 8000daa:	4605      	mov	r5, r0
 8000dac:	d4e0      	bmi.n	8000d70 <_fflush_r+0xc>
 8000dae:	89a3      	ldrh	r3, [r4, #12]
 8000db0:	059b      	lsls	r3, r3, #22
 8000db2:	d4dd      	bmi.n	8000d70 <_fflush_r+0xc>
 8000db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000db6:	f000 f908 	bl	8000fca <__retarget_lock_release_recursive>
 8000dba:	e7d9      	b.n	8000d70 <_fflush_r+0xc>
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <_fflush_r+0x70>)
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	d101      	bne.n	8000dc6 <_fflush_r+0x62>
 8000dc2:	68ac      	ldr	r4, [r5, #8]
 8000dc4:	e7df      	b.n	8000d86 <_fflush_r+0x22>
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <_fflush_r+0x74>)
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	bf08      	it	eq
 8000dcc:	68ec      	ldreq	r4, [r5, #12]
 8000dce:	e7da      	b.n	8000d86 <_fflush_r+0x22>
 8000dd0:	08001a88 	.word	0x08001a88
 8000dd4:	08001aa8 	.word	0x08001aa8
 8000dd8:	08001a68 	.word	0x08001a68

08000ddc <std>:
 8000ddc:	2300      	movs	r3, #0
 8000dde:	b510      	push	{r4, lr}
 8000de0:	4604      	mov	r4, r0
 8000de2:	e9c0 3300 	strd	r3, r3, [r0]
 8000de6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dea:	6083      	str	r3, [r0, #8]
 8000dec:	8181      	strh	r1, [r0, #12]
 8000dee:	6643      	str	r3, [r0, #100]	; 0x64
 8000df0:	81c2      	strh	r2, [r0, #14]
 8000df2:	6183      	str	r3, [r0, #24]
 8000df4:	4619      	mov	r1, r3
 8000df6:	2208      	movs	r2, #8
 8000df8:	305c      	adds	r0, #92	; 0x5c
 8000dfa:	f7ff fdd7 	bl	80009ac <memset>
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <std+0x38>)
 8000e00:	6263      	str	r3, [r4, #36]	; 0x24
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <std+0x3c>)
 8000e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e06:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <std+0x40>)
 8000e08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <std+0x44>)
 8000e0c:	6224      	str	r4, [r4, #32]
 8000e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8000e10:	bd10      	pop	{r4, pc}
 8000e12:	bf00      	nop
 8000e14:	08001855 	.word	0x08001855
 8000e18:	08001877 	.word	0x08001877
 8000e1c:	080018af 	.word	0x080018af
 8000e20:	080018d3 	.word	0x080018d3

08000e24 <_cleanup_r>:
 8000e24:	4901      	ldr	r1, [pc, #4]	; (8000e2c <_cleanup_r+0x8>)
 8000e26:	f000 b8af 	b.w	8000f88 <_fwalk_reent>
 8000e2a:	bf00      	nop
 8000e2c:	08000d65 	.word	0x08000d65

08000e30 <__sfmoreglue>:
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	2268      	movs	r2, #104	; 0x68
 8000e34:	1e4d      	subs	r5, r1, #1
 8000e36:	4355      	muls	r5, r2
 8000e38:	460e      	mov	r6, r1
 8000e3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e3e:	f000 f997 	bl	8001170 <_malloc_r>
 8000e42:	4604      	mov	r4, r0
 8000e44:	b140      	cbz	r0, 8000e58 <__sfmoreglue+0x28>
 8000e46:	2100      	movs	r1, #0
 8000e48:	e9c0 1600 	strd	r1, r6, [r0]
 8000e4c:	300c      	adds	r0, #12
 8000e4e:	60a0      	str	r0, [r4, #8]
 8000e50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e54:	f7ff fdaa 	bl	80009ac <memset>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}

08000e5c <__sfp_lock_acquire>:
 8000e5c:	4801      	ldr	r0, [pc, #4]	; (8000e64 <__sfp_lock_acquire+0x8>)
 8000e5e:	f000 b8b3 	b.w	8000fc8 <__retarget_lock_acquire_recursive>
 8000e62:	bf00      	nop
 8000e64:	200000dd 	.word	0x200000dd

08000e68 <__sfp_lock_release>:
 8000e68:	4801      	ldr	r0, [pc, #4]	; (8000e70 <__sfp_lock_release+0x8>)
 8000e6a:	f000 b8ae 	b.w	8000fca <__retarget_lock_release_recursive>
 8000e6e:	bf00      	nop
 8000e70:	200000dd 	.word	0x200000dd

08000e74 <__sinit_lock_acquire>:
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <__sinit_lock_acquire+0x8>)
 8000e76:	f000 b8a7 	b.w	8000fc8 <__retarget_lock_acquire_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	200000de 	.word	0x200000de

08000e80 <__sinit_lock_release>:
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <__sinit_lock_release+0x8>)
 8000e82:	f000 b8a2 	b.w	8000fca <__retarget_lock_release_recursive>
 8000e86:	bf00      	nop
 8000e88:	200000de 	.word	0x200000de

08000e8c <__sinit>:
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	4604      	mov	r4, r0
 8000e90:	f7ff fff0 	bl	8000e74 <__sinit_lock_acquire>
 8000e94:	69a3      	ldr	r3, [r4, #24]
 8000e96:	b11b      	cbz	r3, 8000ea0 <__sinit+0x14>
 8000e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e9c:	f7ff bff0 	b.w	8000e80 <__sinit_lock_release>
 8000ea0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ea4:	6523      	str	r3, [r4, #80]	; 0x50
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <__sinit+0x68>)
 8000ea8:	4a13      	ldr	r2, [pc, #76]	; (8000ef8 <__sinit+0x6c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	bf04      	itt	eq
 8000eb2:	2301      	moveq	r3, #1
 8000eb4:	61a3      	streq	r3, [r4, #24]
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f000 f820 	bl	8000efc <__sfp>
 8000ebc:	6060      	str	r0, [r4, #4]
 8000ebe:	4620      	mov	r0, r4
 8000ec0:	f000 f81c 	bl	8000efc <__sfp>
 8000ec4:	60a0      	str	r0, [r4, #8]
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f000 f818 	bl	8000efc <__sfp>
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60e0      	str	r0, [r4, #12]
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	6860      	ldr	r0, [r4, #4]
 8000ed4:	f7ff ff82 	bl	8000ddc <std>
 8000ed8:	68a0      	ldr	r0, [r4, #8]
 8000eda:	2201      	movs	r2, #1
 8000edc:	2109      	movs	r1, #9
 8000ede:	f7ff ff7d 	bl	8000ddc <std>
 8000ee2:	68e0      	ldr	r0, [r4, #12]
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	2112      	movs	r1, #18
 8000ee8:	f7ff ff78 	bl	8000ddc <std>
 8000eec:	2301      	movs	r3, #1
 8000eee:	61a3      	str	r3, [r4, #24]
 8000ef0:	e7d2      	b.n	8000e98 <__sinit+0xc>
 8000ef2:	bf00      	nop
 8000ef4:	08001a64 	.word	0x08001a64
 8000ef8:	08000e25 	.word	0x08000e25

08000efc <__sfp>:
 8000efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efe:	4607      	mov	r7, r0
 8000f00:	f7ff ffac 	bl	8000e5c <__sfp_lock_acquire>
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <__sfp+0x84>)
 8000f06:	681e      	ldr	r6, [r3, #0]
 8000f08:	69b3      	ldr	r3, [r6, #24]
 8000f0a:	b913      	cbnz	r3, 8000f12 <__sfp+0x16>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	f7ff ffbd 	bl	8000e8c <__sinit>
 8000f12:	3648      	adds	r6, #72	; 0x48
 8000f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	d503      	bpl.n	8000f24 <__sfp+0x28>
 8000f1c:	6833      	ldr	r3, [r6, #0]
 8000f1e:	b30b      	cbz	r3, 8000f64 <__sfp+0x68>
 8000f20:	6836      	ldr	r6, [r6, #0]
 8000f22:	e7f7      	b.n	8000f14 <__sfp+0x18>
 8000f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f28:	b9d5      	cbnz	r5, 8000f60 <__sfp+0x64>
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <__sfp+0x88>)
 8000f2c:	60e3      	str	r3, [r4, #12]
 8000f2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f32:	6665      	str	r5, [r4, #100]	; 0x64
 8000f34:	f000 f847 	bl	8000fc6 <__retarget_lock_init_recursive>
 8000f38:	f7ff ff96 	bl	8000e68 <__sfp_lock_release>
 8000f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f44:	6025      	str	r5, [r4, #0]
 8000f46:	61a5      	str	r5, [r4, #24]
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4629      	mov	r1, r5
 8000f4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f50:	f7ff fd2c 	bl	80009ac <memset>
 8000f54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f60:	3468      	adds	r4, #104	; 0x68
 8000f62:	e7d9      	b.n	8000f18 <__sfp+0x1c>
 8000f64:	2104      	movs	r1, #4
 8000f66:	4638      	mov	r0, r7
 8000f68:	f7ff ff62 	bl	8000e30 <__sfmoreglue>
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	6030      	str	r0, [r6, #0]
 8000f70:	2800      	cmp	r0, #0
 8000f72:	d1d5      	bne.n	8000f20 <__sfp+0x24>
 8000f74:	f7ff ff78 	bl	8000e68 <__sfp_lock_release>
 8000f78:	230c      	movs	r3, #12
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	e7ee      	b.n	8000f5c <__sfp+0x60>
 8000f7e:	bf00      	nop
 8000f80:	08001a64 	.word	0x08001a64
 8000f84:	ffff0001 	.word	0xffff0001

08000f88 <_fwalk_reent>:
 8000f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	4688      	mov	r8, r1
 8000f90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f94:	2700      	movs	r7, #0
 8000f96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f9a:	f1b9 0901 	subs.w	r9, r9, #1
 8000f9e:	d505      	bpl.n	8000fac <_fwalk_reent+0x24>
 8000fa0:	6824      	ldr	r4, [r4, #0]
 8000fa2:	2c00      	cmp	r4, #0
 8000fa4:	d1f7      	bne.n	8000f96 <_fwalk_reent+0xe>
 8000fa6:	4638      	mov	r0, r7
 8000fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fac:	89ab      	ldrh	r3, [r5, #12]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d907      	bls.n	8000fc2 <_fwalk_reent+0x3a>
 8000fb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	d003      	beq.n	8000fc2 <_fwalk_reent+0x3a>
 8000fba:	4629      	mov	r1, r5
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	47c0      	blx	r8
 8000fc0:	4307      	orrs	r7, r0
 8000fc2:	3568      	adds	r5, #104	; 0x68
 8000fc4:	e7e9      	b.n	8000f9a <_fwalk_reent+0x12>

08000fc6 <__retarget_lock_init_recursive>:
 8000fc6:	4770      	bx	lr

08000fc8 <__retarget_lock_acquire_recursive>:
 8000fc8:	4770      	bx	lr

08000fca <__retarget_lock_release_recursive>:
 8000fca:	4770      	bx	lr

08000fcc <__swhatbuf_r>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	460e      	mov	r6, r1
 8000fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	b096      	sub	sp, #88	; 0x58
 8000fd8:	4614      	mov	r4, r2
 8000fda:	461d      	mov	r5, r3
 8000fdc:	da08      	bge.n	8000ff0 <__swhatbuf_r+0x24>
 8000fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	602a      	str	r2, [r5, #0]
 8000fe6:	061a      	lsls	r2, r3, #24
 8000fe8:	d410      	bmi.n	800100c <__swhatbuf_r+0x40>
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	e00e      	b.n	800100e <__swhatbuf_r+0x42>
 8000ff0:	466a      	mov	r2, sp
 8000ff2:	f000 fc95 	bl	8001920 <_fstat_r>
 8000ff6:	2800      	cmp	r0, #0
 8000ff8:	dbf1      	blt.n	8000fde <__swhatbuf_r+0x12>
 8000ffa:	9a01      	ldr	r2, [sp, #4]
 8000ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001004:	425a      	negs	r2, r3
 8001006:	415a      	adcs	r2, r3
 8001008:	602a      	str	r2, [r5, #0]
 800100a:	e7ee      	b.n	8000fea <__swhatbuf_r+0x1e>
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	2000      	movs	r0, #0
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	b016      	add	sp, #88	; 0x58
 8001014:	bd70      	pop	{r4, r5, r6, pc}
	...

08001018 <__smakebuf_r>:
 8001018:	898b      	ldrh	r3, [r1, #12]
 800101a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800101c:	079d      	lsls	r5, r3, #30
 800101e:	4606      	mov	r6, r0
 8001020:	460c      	mov	r4, r1
 8001022:	d507      	bpl.n	8001034 <__smakebuf_r+0x1c>
 8001024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	6123      	str	r3, [r4, #16]
 800102c:	2301      	movs	r3, #1
 800102e:	6163      	str	r3, [r4, #20]
 8001030:	b002      	add	sp, #8
 8001032:	bd70      	pop	{r4, r5, r6, pc}
 8001034:	ab01      	add	r3, sp, #4
 8001036:	466a      	mov	r2, sp
 8001038:	f7ff ffc8 	bl	8000fcc <__swhatbuf_r>
 800103c:	9900      	ldr	r1, [sp, #0]
 800103e:	4605      	mov	r5, r0
 8001040:	4630      	mov	r0, r6
 8001042:	f000 f895 	bl	8001170 <_malloc_r>
 8001046:	b948      	cbnz	r0, 800105c <__smakebuf_r+0x44>
 8001048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800104c:	059a      	lsls	r2, r3, #22
 800104e:	d4ef      	bmi.n	8001030 <__smakebuf_r+0x18>
 8001050:	f023 0303 	bic.w	r3, r3, #3
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	81a3      	strh	r3, [r4, #12]
 800105a:	e7e3      	b.n	8001024 <__smakebuf_r+0xc>
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <__smakebuf_r+0x7c>)
 800105e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001060:	89a3      	ldrh	r3, [r4, #12]
 8001062:	6020      	str	r0, [r4, #0]
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	81a3      	strh	r3, [r4, #12]
 800106a:	9b00      	ldr	r3, [sp, #0]
 800106c:	6163      	str	r3, [r4, #20]
 800106e:	9b01      	ldr	r3, [sp, #4]
 8001070:	6120      	str	r0, [r4, #16]
 8001072:	b15b      	cbz	r3, 800108c <__smakebuf_r+0x74>
 8001074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001078:	4630      	mov	r0, r6
 800107a:	f000 fc63 	bl	8001944 <_isatty_r>
 800107e:	b128      	cbz	r0, 800108c <__smakebuf_r+0x74>
 8001080:	89a3      	ldrh	r3, [r4, #12]
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	81a3      	strh	r3, [r4, #12]
 800108c:	89a0      	ldrh	r0, [r4, #12]
 800108e:	4305      	orrs	r5, r0
 8001090:	81a5      	strh	r5, [r4, #12]
 8001092:	e7cd      	b.n	8001030 <__smakebuf_r+0x18>
 8001094:	08000e25 	.word	0x08000e25

08001098 <_free_r>:
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800109a:	2900      	cmp	r1, #0
 800109c:	d044      	beq.n	8001128 <_free_r+0x90>
 800109e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010a2:	9001      	str	r0, [sp, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f1a1 0404 	sub.w	r4, r1, #4
 80010aa:	bfb8      	it	lt
 80010ac:	18e4      	addlt	r4, r4, r3
 80010ae:	f000 fc6b 	bl	8001988 <__malloc_lock>
 80010b2:	4a1e      	ldr	r2, [pc, #120]	; (800112c <_free_r+0x94>)
 80010b4:	9801      	ldr	r0, [sp, #4]
 80010b6:	6813      	ldr	r3, [r2, #0]
 80010b8:	b933      	cbnz	r3, 80010c8 <_free_r+0x30>
 80010ba:	6063      	str	r3, [r4, #4]
 80010bc:	6014      	str	r4, [r2, #0]
 80010be:	b003      	add	sp, #12
 80010c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010c4:	f000 bc66 	b.w	8001994 <__malloc_unlock>
 80010c8:	42a3      	cmp	r3, r4
 80010ca:	d908      	bls.n	80010de <_free_r+0x46>
 80010cc:	6825      	ldr	r5, [r4, #0]
 80010ce:	1961      	adds	r1, r4, r5
 80010d0:	428b      	cmp	r3, r1
 80010d2:	bf01      	itttt	eq
 80010d4:	6819      	ldreq	r1, [r3, #0]
 80010d6:	685b      	ldreq	r3, [r3, #4]
 80010d8:	1949      	addeq	r1, r1, r5
 80010da:	6021      	streq	r1, [r4, #0]
 80010dc:	e7ed      	b.n	80010ba <_free_r+0x22>
 80010de:	461a      	mov	r2, r3
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	b10b      	cbz	r3, 80010e8 <_free_r+0x50>
 80010e4:	42a3      	cmp	r3, r4
 80010e6:	d9fa      	bls.n	80010de <_free_r+0x46>
 80010e8:	6811      	ldr	r1, [r2, #0]
 80010ea:	1855      	adds	r5, r2, r1
 80010ec:	42a5      	cmp	r5, r4
 80010ee:	d10b      	bne.n	8001108 <_free_r+0x70>
 80010f0:	6824      	ldr	r4, [r4, #0]
 80010f2:	4421      	add	r1, r4
 80010f4:	1854      	adds	r4, r2, r1
 80010f6:	42a3      	cmp	r3, r4
 80010f8:	6011      	str	r1, [r2, #0]
 80010fa:	d1e0      	bne.n	80010be <_free_r+0x26>
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	6053      	str	r3, [r2, #4]
 8001102:	4421      	add	r1, r4
 8001104:	6011      	str	r1, [r2, #0]
 8001106:	e7da      	b.n	80010be <_free_r+0x26>
 8001108:	d902      	bls.n	8001110 <_free_r+0x78>
 800110a:	230c      	movs	r3, #12
 800110c:	6003      	str	r3, [r0, #0]
 800110e:	e7d6      	b.n	80010be <_free_r+0x26>
 8001110:	6825      	ldr	r5, [r4, #0]
 8001112:	1961      	adds	r1, r4, r5
 8001114:	428b      	cmp	r3, r1
 8001116:	bf04      	itt	eq
 8001118:	6819      	ldreq	r1, [r3, #0]
 800111a:	685b      	ldreq	r3, [r3, #4]
 800111c:	6063      	str	r3, [r4, #4]
 800111e:	bf04      	itt	eq
 8001120:	1949      	addeq	r1, r1, r5
 8001122:	6021      	streq	r1, [r4, #0]
 8001124:	6054      	str	r4, [r2, #4]
 8001126:	e7ca      	b.n	80010be <_free_r+0x26>
 8001128:	b003      	add	sp, #12
 800112a:	bd30      	pop	{r4, r5, pc}
 800112c:	200000e0 	.word	0x200000e0

08001130 <sbrk_aligned>:
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	4e0e      	ldr	r6, [pc, #56]	; (800116c <sbrk_aligned+0x3c>)
 8001134:	460c      	mov	r4, r1
 8001136:	6831      	ldr	r1, [r6, #0]
 8001138:	4605      	mov	r5, r0
 800113a:	b911      	cbnz	r1, 8001142 <sbrk_aligned+0x12>
 800113c:	f000 fb7a 	bl	8001834 <_sbrk_r>
 8001140:	6030      	str	r0, [r6, #0]
 8001142:	4621      	mov	r1, r4
 8001144:	4628      	mov	r0, r5
 8001146:	f000 fb75 	bl	8001834 <_sbrk_r>
 800114a:	1c43      	adds	r3, r0, #1
 800114c:	d00a      	beq.n	8001164 <sbrk_aligned+0x34>
 800114e:	1cc4      	adds	r4, r0, #3
 8001150:	f024 0403 	bic.w	r4, r4, #3
 8001154:	42a0      	cmp	r0, r4
 8001156:	d007      	beq.n	8001168 <sbrk_aligned+0x38>
 8001158:	1a21      	subs	r1, r4, r0
 800115a:	4628      	mov	r0, r5
 800115c:	f000 fb6a 	bl	8001834 <_sbrk_r>
 8001160:	3001      	adds	r0, #1
 8001162:	d101      	bne.n	8001168 <sbrk_aligned+0x38>
 8001164:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001168:	4620      	mov	r0, r4
 800116a:	bd70      	pop	{r4, r5, r6, pc}
 800116c:	200000e4 	.word	0x200000e4

08001170 <_malloc_r>:
 8001170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001174:	1ccd      	adds	r5, r1, #3
 8001176:	f025 0503 	bic.w	r5, r5, #3
 800117a:	3508      	adds	r5, #8
 800117c:	2d0c      	cmp	r5, #12
 800117e:	bf38      	it	cc
 8001180:	250c      	movcc	r5, #12
 8001182:	2d00      	cmp	r5, #0
 8001184:	4607      	mov	r7, r0
 8001186:	db01      	blt.n	800118c <_malloc_r+0x1c>
 8001188:	42a9      	cmp	r1, r5
 800118a:	d905      	bls.n	8001198 <_malloc_r+0x28>
 800118c:	230c      	movs	r3, #12
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	2600      	movs	r6, #0
 8001192:	4630      	mov	r0, r6
 8001194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001198:	4e2e      	ldr	r6, [pc, #184]	; (8001254 <_malloc_r+0xe4>)
 800119a:	f000 fbf5 	bl	8001988 <__malloc_lock>
 800119e:	6833      	ldr	r3, [r6, #0]
 80011a0:	461c      	mov	r4, r3
 80011a2:	bb34      	cbnz	r4, 80011f2 <_malloc_r+0x82>
 80011a4:	4629      	mov	r1, r5
 80011a6:	4638      	mov	r0, r7
 80011a8:	f7ff ffc2 	bl	8001130 <sbrk_aligned>
 80011ac:	1c43      	adds	r3, r0, #1
 80011ae:	4604      	mov	r4, r0
 80011b0:	d14d      	bne.n	800124e <_malloc_r+0xde>
 80011b2:	6834      	ldr	r4, [r6, #0]
 80011b4:	4626      	mov	r6, r4
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d140      	bne.n	800123c <_malloc_r+0xcc>
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	4631      	mov	r1, r6
 80011be:	4638      	mov	r0, r7
 80011c0:	eb04 0803 	add.w	r8, r4, r3
 80011c4:	f000 fb36 	bl	8001834 <_sbrk_r>
 80011c8:	4580      	cmp	r8, r0
 80011ca:	d13a      	bne.n	8001242 <_malloc_r+0xd2>
 80011cc:	6821      	ldr	r1, [r4, #0]
 80011ce:	3503      	adds	r5, #3
 80011d0:	1a6d      	subs	r5, r5, r1
 80011d2:	f025 0503 	bic.w	r5, r5, #3
 80011d6:	3508      	adds	r5, #8
 80011d8:	2d0c      	cmp	r5, #12
 80011da:	bf38      	it	cc
 80011dc:	250c      	movcc	r5, #12
 80011de:	4629      	mov	r1, r5
 80011e0:	4638      	mov	r0, r7
 80011e2:	f7ff ffa5 	bl	8001130 <sbrk_aligned>
 80011e6:	3001      	adds	r0, #1
 80011e8:	d02b      	beq.n	8001242 <_malloc_r+0xd2>
 80011ea:	6823      	ldr	r3, [r4, #0]
 80011ec:	442b      	add	r3, r5
 80011ee:	6023      	str	r3, [r4, #0]
 80011f0:	e00e      	b.n	8001210 <_malloc_r+0xa0>
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	1b52      	subs	r2, r2, r5
 80011f6:	d41e      	bmi.n	8001236 <_malloc_r+0xc6>
 80011f8:	2a0b      	cmp	r2, #11
 80011fa:	d916      	bls.n	800122a <_malloc_r+0xba>
 80011fc:	1961      	adds	r1, r4, r5
 80011fe:	42a3      	cmp	r3, r4
 8001200:	6025      	str	r5, [r4, #0]
 8001202:	bf18      	it	ne
 8001204:	6059      	strne	r1, [r3, #4]
 8001206:	6863      	ldr	r3, [r4, #4]
 8001208:	bf08      	it	eq
 800120a:	6031      	streq	r1, [r6, #0]
 800120c:	5162      	str	r2, [r4, r5]
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	4638      	mov	r0, r7
 8001212:	f104 060b 	add.w	r6, r4, #11
 8001216:	f000 fbbd 	bl	8001994 <__malloc_unlock>
 800121a:	f026 0607 	bic.w	r6, r6, #7
 800121e:	1d23      	adds	r3, r4, #4
 8001220:	1af2      	subs	r2, r6, r3
 8001222:	d0b6      	beq.n	8001192 <_malloc_r+0x22>
 8001224:	1b9b      	subs	r3, r3, r6
 8001226:	50a3      	str	r3, [r4, r2]
 8001228:	e7b3      	b.n	8001192 <_malloc_r+0x22>
 800122a:	6862      	ldr	r2, [r4, #4]
 800122c:	42a3      	cmp	r3, r4
 800122e:	bf0c      	ite	eq
 8001230:	6032      	streq	r2, [r6, #0]
 8001232:	605a      	strne	r2, [r3, #4]
 8001234:	e7ec      	b.n	8001210 <_malloc_r+0xa0>
 8001236:	4623      	mov	r3, r4
 8001238:	6864      	ldr	r4, [r4, #4]
 800123a:	e7b2      	b.n	80011a2 <_malloc_r+0x32>
 800123c:	4634      	mov	r4, r6
 800123e:	6876      	ldr	r6, [r6, #4]
 8001240:	e7b9      	b.n	80011b6 <_malloc_r+0x46>
 8001242:	230c      	movs	r3, #12
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	4638      	mov	r0, r7
 8001248:	f000 fba4 	bl	8001994 <__malloc_unlock>
 800124c:	e7a1      	b.n	8001192 <_malloc_r+0x22>
 800124e:	6025      	str	r5, [r4, #0]
 8001250:	e7de      	b.n	8001210 <_malloc_r+0xa0>
 8001252:	bf00      	nop
 8001254:	200000e0 	.word	0x200000e0

08001258 <__sfputc_r>:
 8001258:	6893      	ldr	r3, [r2, #8]
 800125a:	3b01      	subs	r3, #1
 800125c:	2b00      	cmp	r3, #0
 800125e:	b410      	push	{r4}
 8001260:	6093      	str	r3, [r2, #8]
 8001262:	da08      	bge.n	8001276 <__sfputc_r+0x1e>
 8001264:	6994      	ldr	r4, [r2, #24]
 8001266:	42a3      	cmp	r3, r4
 8001268:	db01      	blt.n	800126e <__sfputc_r+0x16>
 800126a:	290a      	cmp	r1, #10
 800126c:	d103      	bne.n	8001276 <__sfputc_r+0x1e>
 800126e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001272:	f7ff bc31 	b.w	8000ad8 <__swbuf_r>
 8001276:	6813      	ldr	r3, [r2, #0]
 8001278:	1c58      	adds	r0, r3, #1
 800127a:	6010      	str	r0, [r2, #0]
 800127c:	7019      	strb	r1, [r3, #0]
 800127e:	4608      	mov	r0, r1
 8001280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001284:	4770      	bx	lr

08001286 <__sfputs_r>:
 8001286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001288:	4606      	mov	r6, r0
 800128a:	460f      	mov	r7, r1
 800128c:	4614      	mov	r4, r2
 800128e:	18d5      	adds	r5, r2, r3
 8001290:	42ac      	cmp	r4, r5
 8001292:	d101      	bne.n	8001298 <__sfputs_r+0x12>
 8001294:	2000      	movs	r0, #0
 8001296:	e007      	b.n	80012a8 <__sfputs_r+0x22>
 8001298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800129c:	463a      	mov	r2, r7
 800129e:	4630      	mov	r0, r6
 80012a0:	f7ff ffda 	bl	8001258 <__sfputc_r>
 80012a4:	1c43      	adds	r3, r0, #1
 80012a6:	d1f3      	bne.n	8001290 <__sfputs_r+0xa>
 80012a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080012ac <_vfiprintf_r>:
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b0:	460d      	mov	r5, r1
 80012b2:	b09d      	sub	sp, #116	; 0x74
 80012b4:	4614      	mov	r4, r2
 80012b6:	4698      	mov	r8, r3
 80012b8:	4606      	mov	r6, r0
 80012ba:	b118      	cbz	r0, 80012c4 <_vfiprintf_r+0x18>
 80012bc:	6983      	ldr	r3, [r0, #24]
 80012be:	b90b      	cbnz	r3, 80012c4 <_vfiprintf_r+0x18>
 80012c0:	f7ff fde4 	bl	8000e8c <__sinit>
 80012c4:	4b89      	ldr	r3, [pc, #548]	; (80014ec <_vfiprintf_r+0x240>)
 80012c6:	429d      	cmp	r5, r3
 80012c8:	d11b      	bne.n	8001302 <_vfiprintf_r+0x56>
 80012ca:	6875      	ldr	r5, [r6, #4]
 80012cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012ce:	07d9      	lsls	r1, r3, #31
 80012d0:	d405      	bmi.n	80012de <_vfiprintf_r+0x32>
 80012d2:	89ab      	ldrh	r3, [r5, #12]
 80012d4:	059a      	lsls	r2, r3, #22
 80012d6:	d402      	bmi.n	80012de <_vfiprintf_r+0x32>
 80012d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012da:	f7ff fe75 	bl	8000fc8 <__retarget_lock_acquire_recursive>
 80012de:	89ab      	ldrh	r3, [r5, #12]
 80012e0:	071b      	lsls	r3, r3, #28
 80012e2:	d501      	bpl.n	80012e8 <_vfiprintf_r+0x3c>
 80012e4:	692b      	ldr	r3, [r5, #16]
 80012e6:	b9eb      	cbnz	r3, 8001324 <_vfiprintf_r+0x78>
 80012e8:	4629      	mov	r1, r5
 80012ea:	4630      	mov	r0, r6
 80012ec:	f7ff fc46 	bl	8000b7c <__swsetup_r>
 80012f0:	b1c0      	cbz	r0, 8001324 <_vfiprintf_r+0x78>
 80012f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012f4:	07dc      	lsls	r4, r3, #31
 80012f6:	d50e      	bpl.n	8001316 <_vfiprintf_r+0x6a>
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012fc:	b01d      	add	sp, #116	; 0x74
 80012fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001302:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <_vfiprintf_r+0x244>)
 8001304:	429d      	cmp	r5, r3
 8001306:	d101      	bne.n	800130c <_vfiprintf_r+0x60>
 8001308:	68b5      	ldr	r5, [r6, #8]
 800130a:	e7df      	b.n	80012cc <_vfiprintf_r+0x20>
 800130c:	4b79      	ldr	r3, [pc, #484]	; (80014f4 <_vfiprintf_r+0x248>)
 800130e:	429d      	cmp	r5, r3
 8001310:	bf08      	it	eq
 8001312:	68f5      	ldreq	r5, [r6, #12]
 8001314:	e7da      	b.n	80012cc <_vfiprintf_r+0x20>
 8001316:	89ab      	ldrh	r3, [r5, #12]
 8001318:	0598      	lsls	r0, r3, #22
 800131a:	d4ed      	bmi.n	80012f8 <_vfiprintf_r+0x4c>
 800131c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800131e:	f7ff fe54 	bl	8000fca <__retarget_lock_release_recursive>
 8001322:	e7e9      	b.n	80012f8 <_vfiprintf_r+0x4c>
 8001324:	2300      	movs	r3, #0
 8001326:	9309      	str	r3, [sp, #36]	; 0x24
 8001328:	2320      	movs	r3, #32
 800132a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800132e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001332:	2330      	movs	r3, #48	; 0x30
 8001334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80014f8 <_vfiprintf_r+0x24c>
 8001338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800133c:	f04f 0901 	mov.w	r9, #1
 8001340:	4623      	mov	r3, r4
 8001342:	469a      	mov	sl, r3
 8001344:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001348:	b10a      	cbz	r2, 800134e <_vfiprintf_r+0xa2>
 800134a:	2a25      	cmp	r2, #37	; 0x25
 800134c:	d1f9      	bne.n	8001342 <_vfiprintf_r+0x96>
 800134e:	ebba 0b04 	subs.w	fp, sl, r4
 8001352:	d00b      	beq.n	800136c <_vfiprintf_r+0xc0>
 8001354:	465b      	mov	r3, fp
 8001356:	4622      	mov	r2, r4
 8001358:	4629      	mov	r1, r5
 800135a:	4630      	mov	r0, r6
 800135c:	f7ff ff93 	bl	8001286 <__sfputs_r>
 8001360:	3001      	adds	r0, #1
 8001362:	f000 80aa 	beq.w	80014ba <_vfiprintf_r+0x20e>
 8001366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001368:	445a      	add	r2, fp
 800136a:	9209      	str	r2, [sp, #36]	; 0x24
 800136c:	f89a 3000 	ldrb.w	r3, [sl]
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80a2 	beq.w	80014ba <_vfiprintf_r+0x20e>
 8001376:	2300      	movs	r3, #0
 8001378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800137c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001380:	f10a 0a01 	add.w	sl, sl, #1
 8001384:	9304      	str	r3, [sp, #16]
 8001386:	9307      	str	r3, [sp, #28]
 8001388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800138c:	931a      	str	r3, [sp, #104]	; 0x68
 800138e:	4654      	mov	r4, sl
 8001390:	2205      	movs	r2, #5
 8001392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001396:	4858      	ldr	r0, [pc, #352]	; (80014f8 <_vfiprintf_r+0x24c>)
 8001398:	f7fe ff3a 	bl	8000210 <memchr>
 800139c:	9a04      	ldr	r2, [sp, #16]
 800139e:	b9d8      	cbnz	r0, 80013d8 <_vfiprintf_r+0x12c>
 80013a0:	06d1      	lsls	r1, r2, #27
 80013a2:	bf44      	itt	mi
 80013a4:	2320      	movmi	r3, #32
 80013a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013aa:	0713      	lsls	r3, r2, #28
 80013ac:	bf44      	itt	mi
 80013ae:	232b      	movmi	r3, #43	; 0x2b
 80013b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80013b4:	f89a 3000 	ldrb.w	r3, [sl]
 80013b8:	2b2a      	cmp	r3, #42	; 0x2a
 80013ba:	d015      	beq.n	80013e8 <_vfiprintf_r+0x13c>
 80013bc:	9a07      	ldr	r2, [sp, #28]
 80013be:	4654      	mov	r4, sl
 80013c0:	2000      	movs	r0, #0
 80013c2:	f04f 0c0a 	mov.w	ip, #10
 80013c6:	4621      	mov	r1, r4
 80013c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80013cc:	3b30      	subs	r3, #48	; 0x30
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	d94e      	bls.n	8001470 <_vfiprintf_r+0x1c4>
 80013d2:	b1b0      	cbz	r0, 8001402 <_vfiprintf_r+0x156>
 80013d4:	9207      	str	r2, [sp, #28]
 80013d6:	e014      	b.n	8001402 <_vfiprintf_r+0x156>
 80013d8:	eba0 0308 	sub.w	r3, r0, r8
 80013dc:	fa09 f303 	lsl.w	r3, r9, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	9304      	str	r3, [sp, #16]
 80013e4:	46a2      	mov	sl, r4
 80013e6:	e7d2      	b.n	800138e <_vfiprintf_r+0xe2>
 80013e8:	9b03      	ldr	r3, [sp, #12]
 80013ea:	1d19      	adds	r1, r3, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	9103      	str	r1, [sp, #12]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	bfbb      	ittet	lt
 80013f4:	425b      	neglt	r3, r3
 80013f6:	f042 0202 	orrlt.w	r2, r2, #2
 80013fa:	9307      	strge	r3, [sp, #28]
 80013fc:	9307      	strlt	r3, [sp, #28]
 80013fe:	bfb8      	it	lt
 8001400:	9204      	strlt	r2, [sp, #16]
 8001402:	7823      	ldrb	r3, [r4, #0]
 8001404:	2b2e      	cmp	r3, #46	; 0x2e
 8001406:	d10c      	bne.n	8001422 <_vfiprintf_r+0x176>
 8001408:	7863      	ldrb	r3, [r4, #1]
 800140a:	2b2a      	cmp	r3, #42	; 0x2a
 800140c:	d135      	bne.n	800147a <_vfiprintf_r+0x1ce>
 800140e:	9b03      	ldr	r3, [sp, #12]
 8001410:	1d1a      	adds	r2, r3, #4
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	9203      	str	r2, [sp, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	bfb8      	it	lt
 800141a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800141e:	3402      	adds	r4, #2
 8001420:	9305      	str	r3, [sp, #20]
 8001422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001508 <_vfiprintf_r+0x25c>
 8001426:	7821      	ldrb	r1, [r4, #0]
 8001428:	2203      	movs	r2, #3
 800142a:	4650      	mov	r0, sl
 800142c:	f7fe fef0 	bl	8000210 <memchr>
 8001430:	b140      	cbz	r0, 8001444 <_vfiprintf_r+0x198>
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	eba0 000a 	sub.w	r0, r0, sl
 8001438:	fa03 f000 	lsl.w	r0, r3, r0
 800143c:	9b04      	ldr	r3, [sp, #16]
 800143e:	4303      	orrs	r3, r0
 8001440:	3401      	adds	r4, #1
 8001442:	9304      	str	r3, [sp, #16]
 8001444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001448:	482c      	ldr	r0, [pc, #176]	; (80014fc <_vfiprintf_r+0x250>)
 800144a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800144e:	2206      	movs	r2, #6
 8001450:	f7fe fede 	bl	8000210 <memchr>
 8001454:	2800      	cmp	r0, #0
 8001456:	d03f      	beq.n	80014d8 <_vfiprintf_r+0x22c>
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <_vfiprintf_r+0x254>)
 800145a:	bb1b      	cbnz	r3, 80014a4 <_vfiprintf_r+0x1f8>
 800145c:	9b03      	ldr	r3, [sp, #12]
 800145e:	3307      	adds	r3, #7
 8001460:	f023 0307 	bic.w	r3, r3, #7
 8001464:	3308      	adds	r3, #8
 8001466:	9303      	str	r3, [sp, #12]
 8001468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800146a:	443b      	add	r3, r7
 800146c:	9309      	str	r3, [sp, #36]	; 0x24
 800146e:	e767      	b.n	8001340 <_vfiprintf_r+0x94>
 8001470:	fb0c 3202 	mla	r2, ip, r2, r3
 8001474:	460c      	mov	r4, r1
 8001476:	2001      	movs	r0, #1
 8001478:	e7a5      	b.n	80013c6 <_vfiprintf_r+0x11a>
 800147a:	2300      	movs	r3, #0
 800147c:	3401      	adds	r4, #1
 800147e:	9305      	str	r3, [sp, #20]
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 0c0a 	mov.w	ip, #10
 8001486:	4620      	mov	r0, r4
 8001488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800148c:	3a30      	subs	r2, #48	; 0x30
 800148e:	2a09      	cmp	r2, #9
 8001490:	d903      	bls.n	800149a <_vfiprintf_r+0x1ee>
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0c5      	beq.n	8001422 <_vfiprintf_r+0x176>
 8001496:	9105      	str	r1, [sp, #20]
 8001498:	e7c3      	b.n	8001422 <_vfiprintf_r+0x176>
 800149a:	fb0c 2101 	mla	r1, ip, r1, r2
 800149e:	4604      	mov	r4, r0
 80014a0:	2301      	movs	r3, #1
 80014a2:	e7f0      	b.n	8001486 <_vfiprintf_r+0x1da>
 80014a4:	ab03      	add	r3, sp, #12
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	462a      	mov	r2, r5
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <_vfiprintf_r+0x258>)
 80014ac:	a904      	add	r1, sp, #16
 80014ae:	4630      	mov	r0, r6
 80014b0:	f3af 8000 	nop.w
 80014b4:	4607      	mov	r7, r0
 80014b6:	1c78      	adds	r0, r7, #1
 80014b8:	d1d6      	bne.n	8001468 <_vfiprintf_r+0x1bc>
 80014ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014bc:	07d9      	lsls	r1, r3, #31
 80014be:	d405      	bmi.n	80014cc <_vfiprintf_r+0x220>
 80014c0:	89ab      	ldrh	r3, [r5, #12]
 80014c2:	059a      	lsls	r2, r3, #22
 80014c4:	d402      	bmi.n	80014cc <_vfiprintf_r+0x220>
 80014c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80014c8:	f7ff fd7f 	bl	8000fca <__retarget_lock_release_recursive>
 80014cc:	89ab      	ldrh	r3, [r5, #12]
 80014ce:	065b      	lsls	r3, r3, #25
 80014d0:	f53f af12 	bmi.w	80012f8 <_vfiprintf_r+0x4c>
 80014d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014d6:	e711      	b.n	80012fc <_vfiprintf_r+0x50>
 80014d8:	ab03      	add	r3, sp, #12
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	462a      	mov	r2, r5
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <_vfiprintf_r+0x258>)
 80014e0:	a904      	add	r1, sp, #16
 80014e2:	4630      	mov	r0, r6
 80014e4:	f000 f880 	bl	80015e8 <_printf_i>
 80014e8:	e7e4      	b.n	80014b4 <_vfiprintf_r+0x208>
 80014ea:	bf00      	nop
 80014ec:	08001a88 	.word	0x08001a88
 80014f0:	08001aa8 	.word	0x08001aa8
 80014f4:	08001a68 	.word	0x08001a68
 80014f8:	08001ac8 	.word	0x08001ac8
 80014fc:	08001ad2 	.word	0x08001ad2
 8001500:	00000000 	.word	0x00000000
 8001504:	08001287 	.word	0x08001287
 8001508:	08001ace 	.word	0x08001ace

0800150c <_printf_common>:
 800150c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001510:	4616      	mov	r6, r2
 8001512:	4699      	mov	r9, r3
 8001514:	688a      	ldr	r2, [r1, #8]
 8001516:	690b      	ldr	r3, [r1, #16]
 8001518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800151c:	4293      	cmp	r3, r2
 800151e:	bfb8      	it	lt
 8001520:	4613      	movlt	r3, r2
 8001522:	6033      	str	r3, [r6, #0]
 8001524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001528:	4607      	mov	r7, r0
 800152a:	460c      	mov	r4, r1
 800152c:	b10a      	cbz	r2, 8001532 <_printf_common+0x26>
 800152e:	3301      	adds	r3, #1
 8001530:	6033      	str	r3, [r6, #0]
 8001532:	6823      	ldr	r3, [r4, #0]
 8001534:	0699      	lsls	r1, r3, #26
 8001536:	bf42      	ittt	mi
 8001538:	6833      	ldrmi	r3, [r6, #0]
 800153a:	3302      	addmi	r3, #2
 800153c:	6033      	strmi	r3, [r6, #0]
 800153e:	6825      	ldr	r5, [r4, #0]
 8001540:	f015 0506 	ands.w	r5, r5, #6
 8001544:	d106      	bne.n	8001554 <_printf_common+0x48>
 8001546:	f104 0a19 	add.w	sl, r4, #25
 800154a:	68e3      	ldr	r3, [r4, #12]
 800154c:	6832      	ldr	r2, [r6, #0]
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	42ab      	cmp	r3, r5
 8001552:	dc26      	bgt.n	80015a2 <_printf_common+0x96>
 8001554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001558:	1e13      	subs	r3, r2, #0
 800155a:	6822      	ldr	r2, [r4, #0]
 800155c:	bf18      	it	ne
 800155e:	2301      	movne	r3, #1
 8001560:	0692      	lsls	r2, r2, #26
 8001562:	d42b      	bmi.n	80015bc <_printf_common+0xb0>
 8001564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001568:	4649      	mov	r1, r9
 800156a:	4638      	mov	r0, r7
 800156c:	47c0      	blx	r8
 800156e:	3001      	adds	r0, #1
 8001570:	d01e      	beq.n	80015b0 <_printf_common+0xa4>
 8001572:	6823      	ldr	r3, [r4, #0]
 8001574:	68e5      	ldr	r5, [r4, #12]
 8001576:	6832      	ldr	r2, [r6, #0]
 8001578:	f003 0306 	and.w	r3, r3, #6
 800157c:	2b04      	cmp	r3, #4
 800157e:	bf08      	it	eq
 8001580:	1aad      	subeq	r5, r5, r2
 8001582:	68a3      	ldr	r3, [r4, #8]
 8001584:	6922      	ldr	r2, [r4, #16]
 8001586:	bf0c      	ite	eq
 8001588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800158c:	2500      	movne	r5, #0
 800158e:	4293      	cmp	r3, r2
 8001590:	bfc4      	itt	gt
 8001592:	1a9b      	subgt	r3, r3, r2
 8001594:	18ed      	addgt	r5, r5, r3
 8001596:	2600      	movs	r6, #0
 8001598:	341a      	adds	r4, #26
 800159a:	42b5      	cmp	r5, r6
 800159c:	d11a      	bne.n	80015d4 <_printf_common+0xc8>
 800159e:	2000      	movs	r0, #0
 80015a0:	e008      	b.n	80015b4 <_printf_common+0xa8>
 80015a2:	2301      	movs	r3, #1
 80015a4:	4652      	mov	r2, sl
 80015a6:	4649      	mov	r1, r9
 80015a8:	4638      	mov	r0, r7
 80015aa:	47c0      	blx	r8
 80015ac:	3001      	adds	r0, #1
 80015ae:	d103      	bne.n	80015b8 <_printf_common+0xac>
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015b8:	3501      	adds	r5, #1
 80015ba:	e7c6      	b.n	800154a <_printf_common+0x3e>
 80015bc:	18e1      	adds	r1, r4, r3
 80015be:	1c5a      	adds	r2, r3, #1
 80015c0:	2030      	movs	r0, #48	; 0x30
 80015c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80015c6:	4422      	add	r2, r4
 80015c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80015cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80015d0:	3302      	adds	r3, #2
 80015d2:	e7c7      	b.n	8001564 <_printf_common+0x58>
 80015d4:	2301      	movs	r3, #1
 80015d6:	4622      	mov	r2, r4
 80015d8:	4649      	mov	r1, r9
 80015da:	4638      	mov	r0, r7
 80015dc:	47c0      	blx	r8
 80015de:	3001      	adds	r0, #1
 80015e0:	d0e6      	beq.n	80015b0 <_printf_common+0xa4>
 80015e2:	3601      	adds	r6, #1
 80015e4:	e7d9      	b.n	800159a <_printf_common+0x8e>
	...

080015e8 <_printf_i>:
 80015e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015ec:	7e0f      	ldrb	r7, [r1, #24]
 80015ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80015f0:	2f78      	cmp	r7, #120	; 0x78
 80015f2:	4691      	mov	r9, r2
 80015f4:	4680      	mov	r8, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	469a      	mov	sl, r3
 80015fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80015fe:	d807      	bhi.n	8001610 <_printf_i+0x28>
 8001600:	2f62      	cmp	r7, #98	; 0x62
 8001602:	d80a      	bhi.n	800161a <_printf_i+0x32>
 8001604:	2f00      	cmp	r7, #0
 8001606:	f000 80d8 	beq.w	80017ba <_printf_i+0x1d2>
 800160a:	2f58      	cmp	r7, #88	; 0x58
 800160c:	f000 80a3 	beq.w	8001756 <_printf_i+0x16e>
 8001610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001618:	e03a      	b.n	8001690 <_printf_i+0xa8>
 800161a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800161e:	2b15      	cmp	r3, #21
 8001620:	d8f6      	bhi.n	8001610 <_printf_i+0x28>
 8001622:	a101      	add	r1, pc, #4	; (adr r1, 8001628 <_printf_i+0x40>)
 8001624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001628:	08001681 	.word	0x08001681
 800162c:	08001695 	.word	0x08001695
 8001630:	08001611 	.word	0x08001611
 8001634:	08001611 	.word	0x08001611
 8001638:	08001611 	.word	0x08001611
 800163c:	08001611 	.word	0x08001611
 8001640:	08001695 	.word	0x08001695
 8001644:	08001611 	.word	0x08001611
 8001648:	08001611 	.word	0x08001611
 800164c:	08001611 	.word	0x08001611
 8001650:	08001611 	.word	0x08001611
 8001654:	080017a1 	.word	0x080017a1
 8001658:	080016c5 	.word	0x080016c5
 800165c:	08001783 	.word	0x08001783
 8001660:	08001611 	.word	0x08001611
 8001664:	08001611 	.word	0x08001611
 8001668:	080017c3 	.word	0x080017c3
 800166c:	08001611 	.word	0x08001611
 8001670:	080016c5 	.word	0x080016c5
 8001674:	08001611 	.word	0x08001611
 8001678:	08001611 	.word	0x08001611
 800167c:	0800178b 	.word	0x0800178b
 8001680:	682b      	ldr	r3, [r5, #0]
 8001682:	1d1a      	adds	r2, r3, #4
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	602a      	str	r2, [r5, #0]
 8001688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800168c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001690:	2301      	movs	r3, #1
 8001692:	e0a3      	b.n	80017dc <_printf_i+0x1f4>
 8001694:	6820      	ldr	r0, [r4, #0]
 8001696:	6829      	ldr	r1, [r5, #0]
 8001698:	0606      	lsls	r6, r0, #24
 800169a:	f101 0304 	add.w	r3, r1, #4
 800169e:	d50a      	bpl.n	80016b6 <_printf_i+0xce>
 80016a0:	680e      	ldr	r6, [r1, #0]
 80016a2:	602b      	str	r3, [r5, #0]
 80016a4:	2e00      	cmp	r6, #0
 80016a6:	da03      	bge.n	80016b0 <_printf_i+0xc8>
 80016a8:	232d      	movs	r3, #45	; 0x2d
 80016aa:	4276      	negs	r6, r6
 80016ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016b0:	485e      	ldr	r0, [pc, #376]	; (800182c <_printf_i+0x244>)
 80016b2:	230a      	movs	r3, #10
 80016b4:	e019      	b.n	80016ea <_printf_i+0x102>
 80016b6:	680e      	ldr	r6, [r1, #0]
 80016b8:	602b      	str	r3, [r5, #0]
 80016ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80016be:	bf18      	it	ne
 80016c0:	b236      	sxthne	r6, r6
 80016c2:	e7ef      	b.n	80016a4 <_printf_i+0xbc>
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	6820      	ldr	r0, [r4, #0]
 80016c8:	1d19      	adds	r1, r3, #4
 80016ca:	6029      	str	r1, [r5, #0]
 80016cc:	0601      	lsls	r1, r0, #24
 80016ce:	d501      	bpl.n	80016d4 <_printf_i+0xec>
 80016d0:	681e      	ldr	r6, [r3, #0]
 80016d2:	e002      	b.n	80016da <_printf_i+0xf2>
 80016d4:	0646      	lsls	r6, r0, #25
 80016d6:	d5fb      	bpl.n	80016d0 <_printf_i+0xe8>
 80016d8:	881e      	ldrh	r6, [r3, #0]
 80016da:	4854      	ldr	r0, [pc, #336]	; (800182c <_printf_i+0x244>)
 80016dc:	2f6f      	cmp	r7, #111	; 0x6f
 80016de:	bf0c      	ite	eq
 80016e0:	2308      	moveq	r3, #8
 80016e2:	230a      	movne	r3, #10
 80016e4:	2100      	movs	r1, #0
 80016e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016ea:	6865      	ldr	r5, [r4, #4]
 80016ec:	60a5      	str	r5, [r4, #8]
 80016ee:	2d00      	cmp	r5, #0
 80016f0:	bfa2      	ittt	ge
 80016f2:	6821      	ldrge	r1, [r4, #0]
 80016f4:	f021 0104 	bicge.w	r1, r1, #4
 80016f8:	6021      	strge	r1, [r4, #0]
 80016fa:	b90e      	cbnz	r6, 8001700 <_printf_i+0x118>
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d04d      	beq.n	800179c <_printf_i+0x1b4>
 8001700:	4615      	mov	r5, r2
 8001702:	fbb6 f1f3 	udiv	r1, r6, r3
 8001706:	fb03 6711 	mls	r7, r3, r1, r6
 800170a:	5dc7      	ldrb	r7, [r0, r7]
 800170c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001710:	4637      	mov	r7, r6
 8001712:	42bb      	cmp	r3, r7
 8001714:	460e      	mov	r6, r1
 8001716:	d9f4      	bls.n	8001702 <_printf_i+0x11a>
 8001718:	2b08      	cmp	r3, #8
 800171a:	d10b      	bne.n	8001734 <_printf_i+0x14c>
 800171c:	6823      	ldr	r3, [r4, #0]
 800171e:	07de      	lsls	r6, r3, #31
 8001720:	d508      	bpl.n	8001734 <_printf_i+0x14c>
 8001722:	6923      	ldr	r3, [r4, #16]
 8001724:	6861      	ldr	r1, [r4, #4]
 8001726:	4299      	cmp	r1, r3
 8001728:	bfde      	ittt	le
 800172a:	2330      	movle	r3, #48	; 0x30
 800172c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001730:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001734:	1b52      	subs	r2, r2, r5
 8001736:	6122      	str	r2, [r4, #16]
 8001738:	f8cd a000 	str.w	sl, [sp]
 800173c:	464b      	mov	r3, r9
 800173e:	aa03      	add	r2, sp, #12
 8001740:	4621      	mov	r1, r4
 8001742:	4640      	mov	r0, r8
 8001744:	f7ff fee2 	bl	800150c <_printf_common>
 8001748:	3001      	adds	r0, #1
 800174a:	d14c      	bne.n	80017e6 <_printf_i+0x1fe>
 800174c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001750:	b004      	add	sp, #16
 8001752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001756:	4835      	ldr	r0, [pc, #212]	; (800182c <_printf_i+0x244>)
 8001758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800175c:	6829      	ldr	r1, [r5, #0]
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	f851 6b04 	ldr.w	r6, [r1], #4
 8001764:	6029      	str	r1, [r5, #0]
 8001766:	061d      	lsls	r5, r3, #24
 8001768:	d514      	bpl.n	8001794 <_printf_i+0x1ac>
 800176a:	07df      	lsls	r7, r3, #31
 800176c:	bf44      	itt	mi
 800176e:	f043 0320 	orrmi.w	r3, r3, #32
 8001772:	6023      	strmi	r3, [r4, #0]
 8001774:	b91e      	cbnz	r6, 800177e <_printf_i+0x196>
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	f023 0320 	bic.w	r3, r3, #32
 800177c:	6023      	str	r3, [r4, #0]
 800177e:	2310      	movs	r3, #16
 8001780:	e7b0      	b.n	80016e4 <_printf_i+0xfc>
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	f043 0320 	orr.w	r3, r3, #32
 8001788:	6023      	str	r3, [r4, #0]
 800178a:	2378      	movs	r3, #120	; 0x78
 800178c:	4828      	ldr	r0, [pc, #160]	; (8001830 <_printf_i+0x248>)
 800178e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001792:	e7e3      	b.n	800175c <_printf_i+0x174>
 8001794:	0659      	lsls	r1, r3, #25
 8001796:	bf48      	it	mi
 8001798:	b2b6      	uxthmi	r6, r6
 800179a:	e7e6      	b.n	800176a <_printf_i+0x182>
 800179c:	4615      	mov	r5, r2
 800179e:	e7bb      	b.n	8001718 <_printf_i+0x130>
 80017a0:	682b      	ldr	r3, [r5, #0]
 80017a2:	6826      	ldr	r6, [r4, #0]
 80017a4:	6961      	ldr	r1, [r4, #20]
 80017a6:	1d18      	adds	r0, r3, #4
 80017a8:	6028      	str	r0, [r5, #0]
 80017aa:	0635      	lsls	r5, r6, #24
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	d501      	bpl.n	80017b4 <_printf_i+0x1cc>
 80017b0:	6019      	str	r1, [r3, #0]
 80017b2:	e002      	b.n	80017ba <_printf_i+0x1d2>
 80017b4:	0670      	lsls	r0, r6, #25
 80017b6:	d5fb      	bpl.n	80017b0 <_printf_i+0x1c8>
 80017b8:	8019      	strh	r1, [r3, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	6123      	str	r3, [r4, #16]
 80017be:	4615      	mov	r5, r2
 80017c0:	e7ba      	b.n	8001738 <_printf_i+0x150>
 80017c2:	682b      	ldr	r3, [r5, #0]
 80017c4:	1d1a      	adds	r2, r3, #4
 80017c6:	602a      	str	r2, [r5, #0]
 80017c8:	681d      	ldr	r5, [r3, #0]
 80017ca:	6862      	ldr	r2, [r4, #4]
 80017cc:	2100      	movs	r1, #0
 80017ce:	4628      	mov	r0, r5
 80017d0:	f7fe fd1e 	bl	8000210 <memchr>
 80017d4:	b108      	cbz	r0, 80017da <_printf_i+0x1f2>
 80017d6:	1b40      	subs	r0, r0, r5
 80017d8:	6060      	str	r0, [r4, #4]
 80017da:	6863      	ldr	r3, [r4, #4]
 80017dc:	6123      	str	r3, [r4, #16]
 80017de:	2300      	movs	r3, #0
 80017e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017e4:	e7a8      	b.n	8001738 <_printf_i+0x150>
 80017e6:	6923      	ldr	r3, [r4, #16]
 80017e8:	462a      	mov	r2, r5
 80017ea:	4649      	mov	r1, r9
 80017ec:	4640      	mov	r0, r8
 80017ee:	47d0      	blx	sl
 80017f0:	3001      	adds	r0, #1
 80017f2:	d0ab      	beq.n	800174c <_printf_i+0x164>
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	079b      	lsls	r3, r3, #30
 80017f8:	d413      	bmi.n	8001822 <_printf_i+0x23a>
 80017fa:	68e0      	ldr	r0, [r4, #12]
 80017fc:	9b03      	ldr	r3, [sp, #12]
 80017fe:	4298      	cmp	r0, r3
 8001800:	bfb8      	it	lt
 8001802:	4618      	movlt	r0, r3
 8001804:	e7a4      	b.n	8001750 <_printf_i+0x168>
 8001806:	2301      	movs	r3, #1
 8001808:	4632      	mov	r2, r6
 800180a:	4649      	mov	r1, r9
 800180c:	4640      	mov	r0, r8
 800180e:	47d0      	blx	sl
 8001810:	3001      	adds	r0, #1
 8001812:	d09b      	beq.n	800174c <_printf_i+0x164>
 8001814:	3501      	adds	r5, #1
 8001816:	68e3      	ldr	r3, [r4, #12]
 8001818:	9903      	ldr	r1, [sp, #12]
 800181a:	1a5b      	subs	r3, r3, r1
 800181c:	42ab      	cmp	r3, r5
 800181e:	dcf2      	bgt.n	8001806 <_printf_i+0x21e>
 8001820:	e7eb      	b.n	80017fa <_printf_i+0x212>
 8001822:	2500      	movs	r5, #0
 8001824:	f104 0619 	add.w	r6, r4, #25
 8001828:	e7f5      	b.n	8001816 <_printf_i+0x22e>
 800182a:	bf00      	nop
 800182c:	08001ad9 	.word	0x08001ad9
 8001830:	08001aea 	.word	0x08001aea

08001834 <_sbrk_r>:
 8001834:	b538      	push	{r3, r4, r5, lr}
 8001836:	4d06      	ldr	r5, [pc, #24]	; (8001850 <_sbrk_r+0x1c>)
 8001838:	2300      	movs	r3, #0
 800183a:	4604      	mov	r4, r0
 800183c:	4608      	mov	r0, r1
 800183e:	602b      	str	r3, [r5, #0]
 8001840:	f7ff f82a 	bl	8000898 <_sbrk>
 8001844:	1c43      	adds	r3, r0, #1
 8001846:	d102      	bne.n	800184e <_sbrk_r+0x1a>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	b103      	cbz	r3, 800184e <_sbrk_r+0x1a>
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	bd38      	pop	{r3, r4, r5, pc}
 8001850:	200000e8 	.word	0x200000e8

08001854 <__sread>:
 8001854:	b510      	push	{r4, lr}
 8001856:	460c      	mov	r4, r1
 8001858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800185c:	f000 f8a0 	bl	80019a0 <_read_r>
 8001860:	2800      	cmp	r0, #0
 8001862:	bfab      	itete	ge
 8001864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001866:	89a3      	ldrhlt	r3, [r4, #12]
 8001868:	181b      	addge	r3, r3, r0
 800186a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800186e:	bfac      	ite	ge
 8001870:	6563      	strge	r3, [r4, #84]	; 0x54
 8001872:	81a3      	strhlt	r3, [r4, #12]
 8001874:	bd10      	pop	{r4, pc}

08001876 <__swrite>:
 8001876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800187a:	461f      	mov	r7, r3
 800187c:	898b      	ldrh	r3, [r1, #12]
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	4605      	mov	r5, r0
 8001882:	460c      	mov	r4, r1
 8001884:	4616      	mov	r6, r2
 8001886:	d505      	bpl.n	8001894 <__swrite+0x1e>
 8001888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800188c:	2302      	movs	r3, #2
 800188e:	2200      	movs	r2, #0
 8001890:	f000 f868 	bl	8001964 <_lseek_r>
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800189a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800189e:	81a3      	strh	r3, [r4, #12]
 80018a0:	4632      	mov	r2, r6
 80018a2:	463b      	mov	r3, r7
 80018a4:	4628      	mov	r0, r5
 80018a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80018aa:	f000 b817 	b.w	80018dc <_write_r>

080018ae <__sseek>:
 80018ae:	b510      	push	{r4, lr}
 80018b0:	460c      	mov	r4, r1
 80018b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b6:	f000 f855 	bl	8001964 <_lseek_r>
 80018ba:	1c43      	adds	r3, r0, #1
 80018bc:	89a3      	ldrh	r3, [r4, #12]
 80018be:	bf15      	itete	ne
 80018c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80018c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80018c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80018ca:	81a3      	strheq	r3, [r4, #12]
 80018cc:	bf18      	it	ne
 80018ce:	81a3      	strhne	r3, [r4, #12]
 80018d0:	bd10      	pop	{r4, pc}

080018d2 <__sclose>:
 80018d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018d6:	f000 b813 	b.w	8001900 <_close_r>
	...

080018dc <_write_r>:
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4d07      	ldr	r5, [pc, #28]	; (80018fc <_write_r+0x20>)
 80018e0:	4604      	mov	r4, r0
 80018e2:	4608      	mov	r0, r1
 80018e4:	4611      	mov	r1, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	602a      	str	r2, [r5, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f7fe ff83 	bl	80007f6 <_write>
 80018f0:	1c43      	adds	r3, r0, #1
 80018f2:	d102      	bne.n	80018fa <_write_r+0x1e>
 80018f4:	682b      	ldr	r3, [r5, #0]
 80018f6:	b103      	cbz	r3, 80018fa <_write_r+0x1e>
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	bd38      	pop	{r3, r4, r5, pc}
 80018fc:	200000e8 	.word	0x200000e8

08001900 <_close_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4d06      	ldr	r5, [pc, #24]	; (800191c <_close_r+0x1c>)
 8001904:	2300      	movs	r3, #0
 8001906:	4604      	mov	r4, r0
 8001908:	4608      	mov	r0, r1
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	f7fe ff8f 	bl	800082e <_close>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_close_r+0x1a>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_close_r+0x1a>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	200000e8 	.word	0x200000e8

08001920 <_fstat_r>:
 8001920:	b538      	push	{r3, r4, r5, lr}
 8001922:	4d07      	ldr	r5, [pc, #28]	; (8001940 <_fstat_r+0x20>)
 8001924:	2300      	movs	r3, #0
 8001926:	4604      	mov	r4, r0
 8001928:	4608      	mov	r0, r1
 800192a:	4611      	mov	r1, r2
 800192c:	602b      	str	r3, [r5, #0]
 800192e:	f7fe ff8a 	bl	8000846 <_fstat>
 8001932:	1c43      	adds	r3, r0, #1
 8001934:	d102      	bne.n	800193c <_fstat_r+0x1c>
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	b103      	cbz	r3, 800193c <_fstat_r+0x1c>
 800193a:	6023      	str	r3, [r4, #0]
 800193c:	bd38      	pop	{r3, r4, r5, pc}
 800193e:	bf00      	nop
 8001940:	200000e8 	.word	0x200000e8

08001944 <_isatty_r>:
 8001944:	b538      	push	{r3, r4, r5, lr}
 8001946:	4d06      	ldr	r5, [pc, #24]	; (8001960 <_isatty_r+0x1c>)
 8001948:	2300      	movs	r3, #0
 800194a:	4604      	mov	r4, r0
 800194c:	4608      	mov	r0, r1
 800194e:	602b      	str	r3, [r5, #0]
 8001950:	f7fe ff89 	bl	8000866 <_isatty>
 8001954:	1c43      	adds	r3, r0, #1
 8001956:	d102      	bne.n	800195e <_isatty_r+0x1a>
 8001958:	682b      	ldr	r3, [r5, #0]
 800195a:	b103      	cbz	r3, 800195e <_isatty_r+0x1a>
 800195c:	6023      	str	r3, [r4, #0]
 800195e:	bd38      	pop	{r3, r4, r5, pc}
 8001960:	200000e8 	.word	0x200000e8

08001964 <_lseek_r>:
 8001964:	b538      	push	{r3, r4, r5, lr}
 8001966:	4d07      	ldr	r5, [pc, #28]	; (8001984 <_lseek_r+0x20>)
 8001968:	4604      	mov	r4, r0
 800196a:	4608      	mov	r0, r1
 800196c:	4611      	mov	r1, r2
 800196e:	2200      	movs	r2, #0
 8001970:	602a      	str	r2, [r5, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	f7fe ff82 	bl	800087c <_lseek>
 8001978:	1c43      	adds	r3, r0, #1
 800197a:	d102      	bne.n	8001982 <_lseek_r+0x1e>
 800197c:	682b      	ldr	r3, [r5, #0]
 800197e:	b103      	cbz	r3, 8001982 <_lseek_r+0x1e>
 8001980:	6023      	str	r3, [r4, #0]
 8001982:	bd38      	pop	{r3, r4, r5, pc}
 8001984:	200000e8 	.word	0x200000e8

08001988 <__malloc_lock>:
 8001988:	4801      	ldr	r0, [pc, #4]	; (8001990 <__malloc_lock+0x8>)
 800198a:	f7ff bb1d 	b.w	8000fc8 <__retarget_lock_acquire_recursive>
 800198e:	bf00      	nop
 8001990:	200000dc 	.word	0x200000dc

08001994 <__malloc_unlock>:
 8001994:	4801      	ldr	r0, [pc, #4]	; (800199c <__malloc_unlock+0x8>)
 8001996:	f7ff bb18 	b.w	8000fca <__retarget_lock_release_recursive>
 800199a:	bf00      	nop
 800199c:	200000dc 	.word	0x200000dc

080019a0 <_read_r>:
 80019a0:	b538      	push	{r3, r4, r5, lr}
 80019a2:	4d07      	ldr	r5, [pc, #28]	; (80019c0 <_read_r+0x20>)
 80019a4:	4604      	mov	r4, r0
 80019a6:	4608      	mov	r0, r1
 80019a8:	4611      	mov	r1, r2
 80019aa:	2200      	movs	r2, #0
 80019ac:	602a      	str	r2, [r5, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	f7fe ff04 	bl	80007bc <_read>
 80019b4:	1c43      	adds	r3, r0, #1
 80019b6:	d102      	bne.n	80019be <_read_r+0x1e>
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	b103      	cbz	r3, 80019be <_read_r+0x1e>
 80019bc:	6023      	str	r3, [r4, #0]
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	200000e8 	.word	0x200000e8

080019c4 <_init>:
 80019c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c6:	bf00      	nop
 80019c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ca:	bc08      	pop	{r3}
 80019cc:	469e      	mov	lr, r3
 80019ce:	4770      	bx	lr

080019d0 <_fini>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	bf00      	nop
 80019d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d6:	bc08      	pop	{r3}
 80019d8:	469e      	mov	lr, r3
 80019da:	4770      	bx	lr
